a,"Collectors.ConcatSpliterator#aSpliterator,GregorianCalendar.GregorianCalendar#aLocale"
a1,"Arrays.deepEquals#a1"
a2,"Arrays.deepEquals#a2"
abnormally,"ForkJoinTask#isCompletedAbnormally"
abort,"AbortPolicy#AbortPolicy"
absent,"AsynchronousCompletionTask.getNow#valueIfAbsent,Collections#computeIfAbsent,Collections#putIfAbsent,CopyOnWriteArrayList#addAllAbsent,CopyOnWriteArrayList#addIfAbsent"
absolute,"AbstractPreferences#absolutePath"
abstract,"AbstractCollection#AbstractCollection,AbstractDoubleSpliterator#AbstractDoubleSpliterator,AbstractExecutorService#AbstractExecutorService,AbstractIntSpliterator#AbstractIntSpliterator,AbstractList#AbstractList,AbstractLongSpliterator#AbstractLongSpliterator,AbstractMap#AbstractMap,AbstractOwnableSynchronizer#AbstractOwnableSynchronizer,AbstractPreferences#AbstractPreferences,AbstractQueue#AbstractQueue,AbstractQueuedLongSynchronizer#AbstractQueuedLongSynchronizer,AbstractQueuedSynchronizer#AbstractQueuedSynchronizer,AbstractSequentialList#AbstractSequentialList,AbstractSet#AbstractSet,AbstractSpliterator#AbstractSpliterator"
accept,"AbstractDoubleSpliterator#accept,CompletionStage#acceptEither,CompletionStage#acceptEitherAsync,CompletionStage#thenAccept,CompletionStage#thenAcceptAsync,CompletionStage#thenAcceptBoth,CompletionStage#thenAcceptBothAsync"
access,"LinkedHashMap.LinkedHashMap#accessOrder,LogManager#checkAccess,ZipEntry#getLastAccessTime,ZipEntry#setLastAccessTime,RandomAccess#RandomAccess"
accumulate,"AtomicLongArray#accumulateAndGet,AtomicLongArray#getAndAccumulate,LongAccumulator#accumulate"
accumulator,"AtomicLongArray.accumulateAndGet#accumulatorFunction,Builder.collect#accumulator,Collectors#accumulator,DoubleAccumulator#DoubleAccumulator,LongAccumulator#LongAccumulator"
acquire,"AbstractQueuedSynchronizer#acquireInterruptibly,AbstractQueuedSynchronizer#acquireShared,AbstractQueuedSynchronizer#acquireSharedInterruptibly,AbstractQueuedSynchronizer#tryAcquireNanos,AbstractQueuedSynchronizer#tryAcquireSharedNanos,Semaphore#acquire,Semaphore#acquireUninterruptibly,Semaphore#tryAcquire"
action,"AbstractDoubleSpliterator.tryAdvance#action,CyclicBarrier.CyclicBarrier#barrierAction,RecursiveAction#RecursiveAction"
actions,"LoggingPermission.LoggingPermission#actions,PropertyPermission#getActions"
active,"ForkJoinWorkerThreadFactory#getActiveThreadCount,ThreadPoolExecutor#getActiveCount"
actual,"GregorianCalendar#getActualMaximum,GregorianCalendar#getActualMinimum"
adapt,"ForkJoinTask#adapt"
add,"AbstractPreferences#addNodeChangeListener,AbstractPreferences#addPreferenceChangeListener,AtomicLongArray#addAndGet,AtomicLongArray#getAndAdd,Builder#addUnicodeLocaleAttribute,CopyOnWriteArrayList#addAllAbsent,CopyOnWriteArrayList#addIfAbsent,CountedCompleter#addToPendingCount,LinkedBlockingDeque#addFirst,LinkedBlockingDeque#addLast,LogManager#addHandler,LogManager#addLogger,LogManager#addPropertyChangeListener,Observable#addObserver,StringJoiner#add,TreeSet#addAll,Vector#addElement"
adder,"DoubleAdder#DoubleAdder,LongAdder#LongAdder"
additional,"Spliterators.DoubleArraySpliterator#additionalCharacteristics"
adler,"Deflater#getAdler"
adler32,"Adler32#Adler32"
advance,"AbstractDoubleSpliterator#tryAdvance,Phaser#arriveAndAwaitAdvance,Phaser#awaitAdvance,Phaser#awaitAdvanceInterruptibly"
after,"SimpleTimeZone.setEndRule#after,CompletionStage#runAfterBoth,CompletionStage#runAfterBothAsync,CompletionStage#runAfterEither,CompletionStage#runAfterEitherAsync,Date#after,ScheduledThreadPoolExecutor#getContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#getExecuteExistingDelayedTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setExecuteExistingDelayedTasksAfterShutdownPolicy"
alive,"ThreadPoolExecutor.ThreadPoolExecutor#keepAliveTime,ThreadPoolExecutor#getKeepAliveTime,ThreadPoolExecutor#setKeepAliveTime"
all,"Arrays#parallelSetAll,Arrays#replaceAll,Arrays#setAll,Builder#allMatch,Collections#containsAll,Collections#putAll,Collections#removeAll,Collections#retainAll,ConditionObject#signalAll,CopyOnWriteArrayList#addAllAbsent,EnumSet#allOf,Executors#invokeAll,ThreadPoolExecutor#prestartAllCoreThreads,TreeSet#addAll,Vector#removeAllElements"
allow,"ThreadPoolExecutor#allowCoreThreadTimeOut"
allows,"ThreadPoolExecutor#allowsCoreThreadTimeOut"
amount,"GregorianCalendar.roll#amount"
an,"Vector.copyInto#anArray"
anchoring,"Matcher#hasAnchoringBounds,Matcher#useAnchoringBounds"
and,"AtomicLongArray#accumulateAndGet,AtomicLongArray#addAndGet,AtomicLongArray#decrementAndGet,AtomicLongArray#getAndAccumulate,AtomicLongArray#getAndAdd,AtomicLongArray#getAndDecrement,AtomicLongArray#getAndIncrement,AtomicLongArray#getAndSet,AtomicLongArray#getAndUpdate,AtomicLongArray#incrementAndGet,AtomicLongArray#updateAndGet,AtomicMarkableReference#compareAndSet,AtomicMarkableReference#weakCompareAndSet,BitSet#and,BitSet#andNot,Collectors#collectingAndThen,CountedCompleter#compareAndSetPendingCount,ForkJoinTask#compareAndSetForkJoinTaskTag,OfPrimitive#getAndClearState,Phaser#arriveAndAwaitAdvance,Phaser#arriveAndDeregister"
anonymous,"Logger#getAnonymousLogger"
another,"Builder.compareTo#anotherCalendar,Date.compareTo#anotherDate"
any,"AsynchronousCompletionTask#anyOf,Builder#anyMatch,Builder#findAny,Executors#invokeAny"
append,"FileHandler.FileHandler#append,Matcher#appendReplacement,Matcher#appendTail"
apply,"CompletionStage#applyToEither,CompletionStage#applyToEitherAsync,CompletionStage#thenApply,CompletionStage#thenApplyAsync"
arg,"AbstractQueuedSynchronizer.releaseShared#arg"
args,"Formatter.format#args"
argument,"IllegalFormatConversionException#getArgumentClass,MissingFormatArgumentException#MissingFormatArgumentException"
array,"Spliterators.DoubleArraySpliterator#array,StreamSupport.asArray#arrayFactory,Vector.copyInto#anArray,AbstractPreferences#getByteArray,AbstractPreferences#putByteArray,Arrays#toArray,BitSet#toByteArray,BitSet#toLongArray,ResourceBundle#getStringArray,Spliterators#ArraySpliterator,Spliterators#DoubleArraySpliterator,Spliterators#IntArraySpliterator,Spliterators#LongArraySpliterator,StreamSupport#asArray,StreamSupport#asPrimitiveArray,StreamSupport#newArray,ArrayBlockingQueue#ArrayBlockingQueue,ArrayDeque#ArrayDeque,ArrayList#ArrayList,AtomicIntegerArray#AtomicIntegerArray,AtomicLongArray#AtomicLongArray,AtomicReferenceArray#AtomicReferenceArray,CopyOnWriteArrayList#CopyOnWriteArrayList,CopyOnWriteArraySet#CopyOnWriteArraySet"
arrays,"Arrays#Arrays"
arrive,"Phaser#arrive,Phaser#arriveAndAwaitAdvance,Phaser#arriveAndDeregister"
arrived,"Phaser#getArrivedParties"
as,"Arrays#asList,BaseStream#asLongStream,Builder#asDoubleStream,Collections#asLifoQueue,OptionalDouble#getAsDouble,OptionalInt#getAsInt,OptionalLong#getAsLong,Pattern#asPredicate,Pattern#splitAsStream,ResourceBundle#getResourceAsStream,StampedLock#asReadLock,StampedLock#asReadWriteLock,StampedLock#asWriteLock,StreamSupport#asArray,StreamSupport#asPrimitiveArray"
async,"ForkJoinWorkerThreadFactory.ForkJoinPool#asyncMode,AsynchronousCompletionTask#runAsync,AsynchronousCompletionTask#supplyAsync,CompletionStage#acceptEitherAsync,CompletionStage#applyToEitherAsync,CompletionStage#handleAsync,CompletionStage#runAfterBothAsync,CompletionStage#runAfterEitherAsync,CompletionStage#thenAcceptAsync,CompletionStage#thenAcceptBothAsync,CompletionStage#thenApplyAsync,CompletionStage#thenCombineAsync,CompletionStage#thenComposeAsync,CompletionStage#thenRunAsync,CompletionStage#whenCompleteAsync,ForkJoinWorkerThreadFactory#getAsyncMode"
asynchronous,"AsynchronousCompletionTask#AsynchronousCompletionTask"
at,"Executors#scheduleAtFixedRate,Matcher#lookingAt,Vector#elementAt,Vector#insertElementAt,Vector#removeElementAt,Vector#setElementAt"
atomic,"AtomicBoolean#AtomicBoolean,AtomicInteger#AtomicInteger,AtomicIntegerArray#AtomicIntegerArray,AtomicIntegerFieldUpdater#AtomicIntegerFieldUpdater,AtomicLong#AtomicLong,AtomicLongArray#AtomicLongArray,AtomicLongFieldUpdater#AtomicLongFieldUpdater,AtomicMarkableReference#AtomicMarkableReference,AtomicReference#AtomicReference,AtomicReferenceArray#AtomicReferenceArray,AtomicReferenceFieldUpdater#AtomicReferenceFieldUpdater,AtomicStampedReference#AtomicStampedReference"
attempt,"AtomicMarkableReference#attemptMark,AtomicStampedReference#attemptStamp"
attr,"Attributes.putAll#attr"
attribute,"Builder.removeUnicodeLocaleAttribute#attribute,Builder#addUnicodeLocaleAttribute,Builder#removeUnicodeLocaleAttribute,JarInputStream#jarFileHasClassPathAttribute"
attributes,"JarEntry#getAttributes,Locale#getUnicodeLocaleAttributes,Manifest#getMainAttributes,Attributes#Attributes"
available,"Builder#getAvailableCalendarTypes,Currency#getAvailableCurrencies,DeflaterInputStream#available,Locale#getAvailableLocales,Semaphore#availablePermits,TimeZone#getAvailableIDs"
average,"Builder#average,DoubleSummaryStatistics#getAverage"
averaging,"Collectors#averagingDouble,Collectors#averagingInt,Collectors#averagingLong"
await,"ConditionObject#awaitNanos,ConditionObject#awaitUninterruptibly,ConditionObject#awaitUntil,CyclicBarrier#await,Executors#awaitTermination,ForkJoinWorkerThreadFactory#awaitQuiescence,Phaser#arriveAndAwaitAdvance,Phaser#awaitAdvance,Phaser#awaitAdvanceInterruptibly"
b,"Collectors.ConcatSpliterator#bSpliterator"
backing,"BackingStoreException#BackingStoreException"
barrier,"CyclicBarrier.CyclicBarrier#barrierAction,BrokenBarrierException#BrokenBarrierException,CyclicBarrier#CyclicBarrier"
base,"ResourceBundleControlProvider.getControl#baseName,ResourceBundle#getBaseBundleName,BaseStream#BaseStream"
base64,"Base64#Base64"
basis,"ConcurrentHashMap.reduceEntriesToInt#basis"
bb,"BitSet.valueOf#bb"
bean,"LogManager#getLoggingMXBean,LoggingMXBean#LoggingMXBean"
before,"Date#before"
begin,"Collectors#begin,JarInputStream#beginEntry"
bi,"BiConsumer#BiConsumer,BiFunction#BiFunction,BiPredicate#BiPredicate,ToDoubleBiFunction#ToDoubleBiFunction,ToIntBiFunction#ToIntBiFunction,ToLongBiFunction#ToLongBiFunction"
big,"Formatter#BigDecimalLayout,Scanner#hasNextBigDecimal,Scanner#hasNextBigInteger,Scanner#nextBigDecimal,Scanner#nextBigInteger"
binary,"Arrays#binarySearch,BinaryOperator#BinaryOperator,DoubleBinaryOperator#DoubleBinaryOperator,IntBinaryOperator#IntBinaryOperator,LongBinaryOperator#LongBinaryOperator"
bit,"BitSet.get#bitIndex,BitSet#nextClearBit,BitSet#nextSetBit,BitSet#previousClearBit,BitSet#previousSetBit,BitSet#BitSet"
bits,"UUID.UUID#leastSigBits,UUID.UUID#mostSigBits,UUID#getLeastSignificantBits,UUID#getMostSignificantBits"
block,"AsynchronousCompletionTask#block,ManagedBlocker#managedBlock"
blocker,"ManagedBlocker.managedBlock#blocker,LockSupport#getBlocker,ManagedBlocker#ManagedBlocker"
blocking,"ArrayBlockingQueue#ArrayBlockingQueue,BlockingDeque#BlockingDeque,BlockingQueue#BlockingQueue,LinkedBlockingDeque#LinkedBlockingDeque,LinkedBlockingQueue#LinkedBlockingQueue,PriorityBlockingQueue#PriorityBlockingQueue"
boolean,"AbstractPreferences#getBoolean,AbstractPreferences#putBoolean,Scanner#hasNextBoolean,SplittableRandom#nextBoolean,AtomicBoolean#AtomicBoolean,BooleanSupplier#BooleanSupplier"
both,"CompletionStage#runAfterBoth,CompletionStage#runAfterBothAsync,CompletionStage#thenAcceptBoth,CompletionStage#thenAcceptBothAsync"
bound,"SplittableRandom.doubles#randomNumberBound,SplittableRandom.nextDouble#bound"
bounds,"Matcher#hasAnchoringBounds,Matcher#hasTransparentBounds,Matcher#useAnchoringBounds,Matcher#useTransparentBounds"
boxed,"Builder#boxed"
broken,"CyclicBarrier#isBroken,BrokenBarrierException#BrokenBarrierException"
buf,"DeflaterInputStream.DeflaterInputStream#bufLen,GZIPOutputStream.write#buf"
buff,"FileHandler.write#buff"
buffer,"CRC32.update#buffer"
build,"Builder#build"
builder,"DoubleStream#builder,Builder#Builder"
bulk,"Phaser#bulkRegister"
bundle,"Logger.getAnonymousLogger#resourceBundleName,Logger.logrb#bundleName,Logger.setResourceBundle#bundle,Control#newBundle,Control#toBundleName,Level#getResourceBundleName,LogRecord#setResourceBundleName,Logger#getResourceBundle,Logger#setResourceBundle,ResourceBundle#getBaseBundleName,ResourceBundle#getBundle,ListResourceBundle#ListResourceBundle,PropertyResourceBundle#PropertyResourceBundle,ResourceBundle#ResourceBundle,ResourceBundleControlProvider#ResourceBundleControlProvider"
by,"BinaryOperator#maxBy,BinaryOperator#minBy,Collectors#groupingBy,Collectors#groupingByConcurrent,Collectors#partitioningBy,Map#comparingByKey,Map#comparingByValue,ReentrantLock#isHeldByCurrentThread,WriteLock#isWriteLockedByCurrentThread"
byte,"AbstractPreferences#getByteArray,AbstractPreferences#putByteArray,BitSet#toByteArray,Scanner#hasNextByte,Scanner#nextByte"
bytes,"JarInputStream.JarVerifier#rawBytes,Random.nextBytes#bytes,Deflater#getBytesRead,Deflater#getBytesWritten,Random#nextBytes,UUID#nameUUIDFromBytes"
c1,"Collections.disjoint#c1"
c2,"Collections.disjoint#c2"
cache,"ResourceBundle#clearCache,ResourceBundle#getCacheKey"
cached,"Executors#newCachedThreadPool"
calendar,"Builder.compareTo#anotherCalendar,CalendarNameProvider.getDisplayNames#calendarType,Builder#getAvailableCalendarTypes,Builder#setCalendarType,GregorianCalendar#getCalendarType,Calendar#Calendar,CalendarDataProvider#CalendarDataProvider,CalendarNameProvider#CalendarNameProvider,GregorianCalendar#GregorianCalendar"
call,"Executors#call"
callable,"FutureTask.FutureTask#callable,Executors#callable,Executors#privilegedCallable,Executors#privilegedCallableUsingCurrentClassLoader,Callable#Callable"
caller,"CountedCompleter.onExceptionalCompletion#caller,CallerRunsPolicy#CallerRunsPolicy"
cancel,"FutureTask#cancel,ScheduledThreadPoolExecutor#getRemoveOnCancelPolicy,ScheduledThreadPoolExecutor#setRemoveOnCancelPolicy"
cancellation,"Collectors#cancellationRequested,CancellationException#CancellationException"
cancelled,"FutureTask#isCancelled"
candidate,"Control#getCandidateLocales"
capacity,"ArrayList.ensureCapacity#minCapacity,LinkedBlockingDeque.LinkedBlockingDeque#capacity,LinkedHashSet.LinkedHashSet#initialCapacity,Vector.Vector#capacityIncrement,ArrayList#ensureCapacity,SynchronousQueue#remainingCapacity,Vector#capacity"
cardinality,"BitSet#cardinality"
category,"Locale.setDefault#category"
cause,"ServiceConfigurationError.ServiceConfigurationError#cause"
ceiling,"Collections#ceilingEntry,Collections#ceilingKey,TreeSet#ceiling"
certificates,"JarEntry#getCertificates"
certs,"JarInputStream#getCerts"
cfs,"AsynchronousCompletionTask.anyOf#cfs"
chained,"Collector#ChainedDouble,Collector#ChainedInt,Collector#ChainedLong,Collector#ChainedReference"
change,"AbstractPreferences#addNodeChangeListener,AbstractPreferences#addPreferenceChangeListener,AbstractPreferences#removeNodeChangeListener,AbstractPreferences#removePreferenceChangeListener,GregorianCalendar#getGregorianChange,GregorianCalendar#setGregorianChange,LogManager#addPropertyChangeListener,LogManager#removePropertyChangeListener,NodeChangeEvent#NodeChangeEvent,NodeChangeListener#NodeChangeListener,PreferenceChangeEvent#PreferenceChangeEvent,PreferenceChangeListener#PreferenceChangeListener"
changed,"Observable#hasChanged"
characteristics,"AbstractDoubleSpliterator.DoubleIteratorSpliterator#characteristics,Spliterators.DoubleArraySpliterator#additionalCharacteristics,AbstractDoubleSpliterator#characteristics,Collections#hasCharacteristics"
chars,"Formatter#layoutChars"
charset,"Scanner.Scanner#charsetName,ZipFile.ZipFile#charset"
check,"LogManager#checkAccess"
checked,"Collections#checkedCollection,Collections#checkedList,Collections#checkedMap,Collections#checkedNavigableMap,Collections#checkedNavigableSet,Collections#checkedQueue,Collections#checkedSet,Collections#checkedSortedMap,Collections#checkedSortedSet,CheckedInputStream#CheckedInputStream,CheckedOutputStream#CheckedOutputStream"
checksum,"CheckedOutputStream#getChecksum,Checksum#Checksum"
child,"NodeChangeEvent.NodeChangeEvent#child,BaseStream#getChild,BaseStream#getChildCount"
children,"AbstractPreferences#childrenNames"
cksum,"CheckedOutputStream.CheckedOutputStream#cksum"
cl,"ForkJoinWorkerThread.setContextClassLoader#cl"
class,"LogRecord.setSourceClassName#sourceClassName,Logger.throwing#sourceClass,MissingResourceException.MissingResourceException#className,Executors#privilegedCallableUsingCurrentClassLoader,ForkJoinWorkerThread#getContextClassLoader,ForkJoinWorkerThread#setContextClassLoader,IllegalFormatConversionException#getArgumentClass,JarInputStream#jarFileHasClassPathAttribute,LogRecord#getSourceClassName,LogRecord#setSourceClassName,MissingResourceException#getClassName,ResourceBundle#loadClass"
classifier,"Collectors.groupingByConcurrent#classifier"
clear,"BitSet#nextClearBit,BitSet#previousClearBit,Builder#clearExtensions,OfPrimitive#getAndClearState,ResourceBundle#clearCache,TreeSet#clear"
clock,"UUID#clockSequence"
clone,"TreeSet#clone"
close,"StreamSupport.onClose#closeHandler,MemoryHandler#close,StreamSupport#onClose,ZipInputStream#closeEntry"
closed,"IntStream#rangeClosed,FormatterClosedException#FormatterClosedException"
cmp,"Arrays.parallelSort#cmp"
code,"Currency.getInstance#currencyCode,FileHandler.error#code,LocaleNameProvider.getDisplayCountry#countryCode,LocaleNameProvider.getDisplayLanguage#languageCode,LocaleNameProvider.getDisplayScript#scriptCode,Arrays#deepHashCode,Currency#getCurrencyCode,Currency#getNumericCode,IllegalFormatCodePointException#getCodePoint,JarInputStream#getCodeSigners,JarInputStream#getCodeSource,JarInputStream#getCodeSources,Level#hashCode,IllegalFormatCodePointException#IllegalFormatCodePointException"
coll,"Collections.addAll#coll"
collect,"BaseStream#collectDouble,BaseStream#collectInt,BaseStream#collectLong,Builder#collect"
collecting,"Collectors#collectingAndThen"
collection,"AbstractDoubleSpliterator.IteratorSpliterator#collection,Collectors.toCollection#collectionFactory,Collections#checkedCollection,Collections#synchronizedCollection,Collections#unmodifiableCollection,Collectors#toCollection,PropertyPermission#PropertyPermissionCollection,PropertyPermission#newPermissionCollection,AbstractCollection#AbstractCollection,Collection#Collection"
collections,"Collections#Collections"
collector,"Collector.makeRef#collector,Collector#Collector"
collectors,"Collectors#Collectors"
combine,"CompletionStage#thenCombine,CompletionStage#thenCombineAsync,DoubleSummaryStatistics#combine"
combiner,"Builder.collect#combiner,Collectors#combiner"
command,"Executors.scheduleWithFixedDelay#command"
comment,"Properties.storeToXML#comment,ZipEntry#setComment,ZipFile#getComment"
comments,"Properties.store#comments"
common,"ForkJoinWorkerThreadFactory#commonPool,ForkJoinWorkerThreadFactory#getCommonPoolParallelism"
comp,"Collections.max#comp"
comparator,"Comparator.comparing#keyComparator,TreeSet.TreeSet#comparator,AbstractDoubleSpliterator#getComparator,TreeSet#comparator,Comparator#Comparator"
compare,"Arrays#compare,AtomicMarkableReference#compareAndSet,AtomicMarkableReference#weakCompareAndSet,CountedCompleter#compareAndSetPendingCount,Date#compareTo,ForkJoinTask#compareAndSetForkJoinTaskTag"
comparing,"Comparator#comparing,Comparator#comparingDouble,Comparator#comparingInt,Comparator#comparingLong,Hashtable#thenComparing,Map#comparingByKey,Map#comparingByValue"
compile,"Pattern#compile"
complement,"EnumSet#complementOf"
completable,"CompletionStage#toCompletableFuture,CompletableFuture#CompletableFuture"
complete,"AsynchronousCompletionTask#complete,AsynchronousCompletionTask#completeExceptionally,CompletionStage#whenComplete,CompletionStage#whenCompleteAsync,CountedCompleter#firstComplete,CountedCompleter#helpComplete,CountedCompleter#nextComplete,CountedCompleter#quietlyCompleteRoot,CountedCompleter#tryComplete,ForkJoinTask#quietlyComplete"
completed,"AsynchronousCompletionTask#completedFuture,AsynchronousCompletionTask#isCompletedExceptionally,ForkJoinTask#isCompletedAbnormally,ForkJoinTask#isCompletedNormally,ThreadPoolExecutor#getCompletedTaskCount"
completer,"CountedCompleter#getCompleter,CountedCompleter#CountedCompleter"
completion,"ExecutorCompletionService.ExecutorCompletionService#completionQueue,CountedCompleter#onCompletion,CountedCompleter#onExceptionalCompletion,CountedCompleter#propagateCompletion,AsynchronousCompletionTask#AsynchronousCompletionTask,CompletionException#CompletionException,CompletionService#CompletionService,CompletionStage#CompletionStage,ExecutorCompletionService#ExecutorCompletionService"
compose,"CompletionStage#thenCompose,CompletionStage#thenComposeAsync"
compressed,"ZipEntry#getCompressedSize,ZipEntry#setCompressedSize"
compute,"Collections#compute,Collections#computeIfAbsent,Collections#computeIfPresent"
concat,"Collectors#ConcatSpliterator,DoubleStream#concat"
concurrency,"ConcurrentHashMap.ConcurrentHashMap#concurrencyLevel"
concurrent,"Collectors#groupingByConcurrent,Collectors#toConcurrentMap,ConcurrentHashMap#ConcurrentHashMap,ConcurrentLinkedDeque#ConcurrentLinkedDeque,ConcurrentLinkedQueue#ConcurrentLinkedQueue,ConcurrentMap#ConcurrentMap,ConcurrentModificationException#ConcurrentModificationException,ConcurrentNavigableMap#ConcurrentNavigableMap,ConcurrentSkipListMap#ConcurrentSkipListMap,ConcurrentSkipListSet#ConcurrentSkipListSet"
condition,"ReentrantLock.getWaitQueueLength#condition,StampedLock#newCondition,Condition#Condition,ConditionObject#ConditionObject"
config,"Logger#config"
configuration,"LogManager#readConfiguration,ServiceConfigurationError#ServiceConfigurationError"
console,"ConsoleHandler#ConsoleHandler"
consumer,"Spliterators.forEachRemaining#consumer,LinkedTransferQueue#getWaitingConsumerCount,LinkedTransferQueue#hasWaitingConsumer,BiConsumer#BiConsumer,Consumer#Consumer,DoubleConsumer#DoubleConsumer,IntConsumer#IntConsumer,LongConsumer#LongConsumer,ObjDoubleConsumer#ObjDoubleConsumer,ObjIntConsumer#ObjIntConsumer,ObjLongConsumer#ObjLongConsumer"
contains,"Collections#containsAll,Collections#containsKey,Collections#containsValue,TreeSet#contains"
contended,"AbstractQueuedSynchronizer#hasContended"
context,"ForkJoinWorkerThread#getContextClassLoader,ForkJoinWorkerThread#setContextClassLoader"
continue,"ScheduledThreadPoolExecutor#getContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setContinueExistingPeriodicTasksAfterShutdownPolicy"
control,"ResourceBundle.getBundle#control,Control#getNoFallbackControl,ResourceBundleControlProvider#getControl,Control#Control,ResourceBundleControlProvider#ResourceBundleControlProvider"
conversion,"FormatFlagsConversionMismatchException#getConversion,FormatFlagsConversionMismatchException#FormatFlagsConversionMismatchException,IllegalFormatConversionException#IllegalFormatConversionException,UnknownFormatConversionException#UnknownFormatConversionException"
convert,"StampedLock#tryConvertToOptimisticRead,StampedLock#tryConvertToReadLock,StampedLock#tryConvertToWriteLock"
copies,"Collections#nCopies"
copy,"CopyOnWriteArrayList.CopyOnWriteArrayList#toCopyIn,Arrays#copyOf,Arrays#copyOfRange,Collections#copy,StreamSupport#copyInto,CopyOnWriteArrayList#CopyOnWriteArrayList,CopyOnWriteArraySet#CopyOnWriteArraySet"
core,"Executors.newScheduledThreadPool#corePoolSize,ThreadPoolExecutor#allowCoreThreadTimeOut,ThreadPoolExecutor#allowsCoreThreadTimeOut,ThreadPoolExecutor#getCorePoolSize,ThreadPoolExecutor#prestartAllCoreThreads,ThreadPoolExecutor#prestartCoreThread,ThreadPoolExecutor#setCorePoolSize"
count,"FileHandler.FileHandler#count,BaseStream#getChildCount,Builder#count,ConcurrentHashMap#mappingCount,CountDownLatch#countDown,CountDownLatch#getCount,CountedCompleter#addToPendingCount,CountedCompleter#compareAndSetPendingCount,CountedCompleter#decrementPendingCountUnlessZero,CountedCompleter#getPendingCount,CountedCompleter#setPendingCount,ForkJoinTask#getQueuedTaskCount,ForkJoinTask#getSurplusQueuedTaskCount,ForkJoinWorkerThreadFactory#getActiveThreadCount,ForkJoinWorkerThreadFactory#getQueuedSubmissionCount,ForkJoinWorkerThreadFactory#getRunningThreadCount,ForkJoinWorkerThreadFactory#getStealCount,LinkedTransferQueue#getWaitingConsumerCount,MatchResult#groupCount,Observable#countObservers,ReentrantLock#getHoldCount,StampedLock#getReadLockCount,StringTokenizer#countTokens,ThreadPoolExecutor#getActiveCount,ThreadPoolExecutor#getCompletedTaskCount,ThreadPoolExecutor#getTaskCount,WriteLock#getReadHoldCount,WriteLock#getWriteHoldCount,CountDownLatch#CountDownLatch"
counted,"CountedCompleter#CountedCompleter"
counting,"Collectors#counting"
countries,"Locale#getISOCountries"
country,"Locale.Locale#country,LocaleNameProvider.getDisplayCountry#countryCode,Locale#getCountry,Locale#getDisplayCountry,Locale#getISO3Country"
crc,"ZipEntry.setCrc#crc,ZipEntry#getCrc,ZipEntry#setCrc"
crc32,"CRC32#CRC32"
creation,"ZipEntry#getCreationTime,ZipEntry#setCreationTime"
cs,"JarInputStream.entryNames#cs"
csize,"ZipEntry.setCompressedSize#csize"
csn,"Formatter.Formatter#csn"
cumulate,"Hashtable#CumulateTask,Hashtable#DoubleCumulateTask,Hashtable#IntCumulateTask,Hashtable#LongCumulateTask"
currencies,"Currency#getAvailableCurrencies"
currency,"Currency.getInstance#currencyCode,Currency.getObject#currencyNameProvider,Currency#getCurrencyCode,Currency#Currency,CurrencyNameProvider#CurrencyNameProvider"
current,"Executors#privilegedCallableUsingCurrentClassLoader,ReentrantLock#isHeldByCurrentThread,ThreadLocalRandom#current,WriteLock#isWriteLockedByCurrentThread"
cyclic,"CyclicBarrier#CyclicBarrier"
daemon,"Timer.Timer#isDaemon"
data,"CalendarDataProvider#CalendarDataProvider,DataFormatException#DataFormatException"
date,"Date.compareTo#anotherDate,Date.setDate#date,Date#getDate,Date#setDate,GregorianCalendar#isWeekDateSupported,GregorianCalendar#setWeekDate,GregorianCalendar#toZonedDateTime,Date#Date"
day,"Builder.setWeekDefinition#firstDayOfWeek,GregorianCalendar.GregorianCalendar#dayOfMonth,GregorianCalendar.GregorianCalendar#hourOfDay,GregorianCalendar.setWeekDate#dayOfWeek,SimpleTimeZone.setEndRule#endDay,SimpleTimeZone.setEndRule#endDayOfWeek,SimpleTimeZone.setStartRule#startDay,SimpleTimeZone.setStartRule#startDayOfWeek,TimeZone.getOffset#day,Builder#setFirstDayOfWeek,Builder#setTimeOfDay,CalendarDataProvider#getFirstDayOfWeek,Date#getDay"
daylight,"TimeZoneNameProvider.getDisplayName#daylight,TimeZone#inDaylightTime,TimeZone#observesDaylightTime,TimeZone#useDaylightTime"
days,"Builder.setWeekDefinition#minimalDaysInFirstWeek,Builder#setMinimalDaysInFirstWeek,CalendarDataProvider#getMinimalDaysInFirstWeek"
deadline,"ConditionObject.awaitUntil#deadline"
decimal,"Formatter#BigDecimalLayout,Scanner#hasNextBigDecimal,Scanner#nextBigDecimal"
decode,"Decoder#decode"
decoder,"Base64#getDecoder,Base64#getMimeDecoder,Base64#getUrlDecoder,Decoder#Decoder"
decrement,"AtomicLongArray#decrementAndGet,AtomicLongArray#getAndDecrement,CountedCompleter#decrementPendingCountUnlessZero,LongAdder#decrement"
deep,"Arrays#deepEquals,Arrays#deepHashCode,Arrays#deepToString"
def,"DeflaterOutputStream.DeflaterOutputStream#def"
default,"Collections.getOrDefault#defaultValue,Objects.toString#nullDefault,Collections#getOrDefault,Currency#getDefaultFractionDigits,Executors#defaultThreadFactory,Locale#getDefault,Locale#setDefault"
defaults,"Properties.Properties#defaults"
definition,"Builder#setWeekDefinition"
defl,"DeflaterInputStream.DeflaterInputStream#defl"
deflate,"Deflater#deflate"
deflater,"Deflater#Deflater,DeflaterInputStream#DeflaterInputStream,DeflaterOutputStream#DeflaterOutputStream"
delay,"Executors.scheduleWithFixedDelay#delay,Executors.scheduleWithFixedDelay#initialDelay,Executors#scheduleWithFixedDelay,ScheduledThreadPoolExecutor#getDelay,DelayQueue#DelayQueue"
delayed,"ScheduledThreadPoolExecutor#getExecuteExistingDelayedTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setExecuteExistingDelayedTasksAfterShutdownPolicy,Delayed#Delayed"
delete,"Observable#deleteObserver,Observable#deleteObservers"
delim,"StringTokenizer.nextToken#delim"
delimiter,"StringJoiner.StringJoiner#delimiter,Scanner#delimiter,Scanner#useDelimiter"
delims,"StringTokenizer.StringTokenizer#returnDelims"
delta,"AtomicLongArray.addAndGet#delta"
dependents,"AsynchronousCompletionTask#getNumberOfDependents"
deque,"Collections.asLifoQueue#deque,ArrayDeque#ArrayDeque,BlockingDeque#BlockingDeque,ConcurrentLinkedDeque#ConcurrentLinkedDeque,Deque#Deque,LinkedBlockingDeque#LinkedBlockingDeque"
deregister,"Phaser#arriveAndDeregister"
desc,"PatternSyntaxException.PatternSyntaxException#desc"
descending,"Collections#descendingKeySet,Collections#descendingMap,TreeSet#descendingIterator,TreeSet#descendingSet"
description,"PatternSyntaxException#getDescription"
dest,"BaseStream.copyInto#destOffset,Collections.copy#dest"
dictionary,"Deflater#setDictionary,Inflater#needsDictionary,Dictionary#Dictionary"
digests,"JarInputStream#getManifestDigests"
digits,"Currency#getDefaultFractionDigits"
directory,"ZipEntry#isDirectory"
discard,"DiscardOldestPolicy#DiscardOldestPolicy,DiscardPolicy#DiscardPolicy"
disjoint,"Collections#disjoint"
display,"CalendarNameProvider#getDisplayNames,Currency#getDisplayName,Locale#getDisplayCountry,Locale#getDisplayLanguage,Locale#getDisplayScript,Locale#getDisplayVariant,TimeZoneNameProvider#getGenericDisplayName"
distance,"Collections.rotate#distance"
distinct,"Builder#distinct"
done,"FutureTask#isDone"
dos,"DeflaterInputStream#dosToJavaTime,DeflaterInputStream#javaToDosTime"
dot,"Formatter#hasDot"
double,"AbstractDoubleSpliterator#DoubleIteratorSpliterator,AbstractPreferences#getDouble,AbstractPreferences#putDouble,AtomicInteger#doubleValue,BaseStream#collectDouble,BaseStream#flattenDouble,Builder#asDoubleStream,Builder#makeDouble,Builder#mapToDouble,Collector#ChainedDouble,Collector#flatMapToDouble,Collectors#averagingDouble,Collectors#summarizingDouble,Collectors#summingDouble,Comparator#comparingDouble,ConcurrentHashMap#reduceEntriesToDouble,ConcurrentHashMap#reduceKeysToDouble,ConcurrentHashMap#reduceToDouble,ConcurrentHashMap#reduceValuesToDouble,Hashtable#DoubleCumulateTask,OptionalDouble#getAsDouble,Scanner#hasNextDouble,Spliterators#DoubleArraySpliterator,Spliterators#emptyDoubleSpliterator,Spliterators#nextDouble,StreamSupport#doubleStream,AbstractDoubleSpliterator#AbstractDoubleSpliterator,DoubleAccumulator#DoubleAccumulator,DoubleAdder#DoubleAdder,DoubleBinaryOperator#DoubleBinaryOperator,DoubleConsumer#DoubleConsumer,DoubleFunction#DoubleFunction,DoublePredicate#DoublePredicate,DoubleStream#DoubleStream,DoubleSummaryStatistics#DoubleSummaryStatistics,DoubleSupplier#DoubleSupplier,DoubleToIntFunction#DoubleToIntFunction,DoubleToLongFunction#DoubleToLongFunction,DoubleUnaryOperator#DoubleUnaryOperator,IntToDoubleFunction#IntToDoubleFunction,LongToDoubleFunction#LongToDoubleFunction,ObjDoubleConsumer#ObjDoubleConsumer,OfDouble#OfDouble,OptionalDouble#OptionalDouble,ToDoubleBiFunction#ToDoubleBiFunction,ToDoubleFunction#ToDoubleFunction"
doubles,"SplittableRandom#doubles"
down,"CountDownLatch#countDown,CountDownLatch#CountDownLatch"
downstream,"Collectors.partitioningBy#downstream"
drain,"Semaphore#drainPermits,SynchronousQueue#drainTo"
ds,"TimeZone#getAvailableIDs"
dst,"Decoder.decode#dst,SimpleTimeZone.SimpleTimeZone#dstSavings,SimpleTimeZone.setDSTSavings#millisSavedDuringDST,SimpleTimeZone#setDSTSavings,TimeZone#getDSTSavings"
dtime,"DeflaterInputStream.dosToJavaTime#dtime"
dup,"Formatter#dup"
duplicate,"DuplicateFormatFlagsException#DuplicateFormatFlagsException"
during,"SimpleTimeZone.setDSTSavings#millisSavedDuringDST"
e1,"EnumSet.of#e1"
e2,"EnumSet.of#e2"
e3,"EnumSet.of#e3"
e4,"EnumSet.of#e4"
e5,"EnumSet.of#e5"
each,"AbstractDoubleSpliterator#forEachRemaining,Arrays#forEach,Builder#forEachOrdered,ConcurrentHashMap#forEachEntry,ConcurrentHashMap#forEachKey,ConcurrentHashMap#forEachValue"
eager,"JarInputStream.setEagerValidation#eager,JarInputStream#setEagerValidation"
either,"CompletionStage#acceptEither,CompletionStage#acceptEitherAsync,CompletionStage#applyToEither,CompletionStage#applyToEitherAsync,CompletionStage#runAfterEither,CompletionStage#runAfterEitherAsync"
element,"Arrays.set#element,EnumSet.allOf#elementType,StringJoiner.add#newElement,TreeSet.headSet#toElement,TreeSet.tailSet#fromElement,Collections#element,Collections#nextElement,Vector#addElement,Vector#elementAt,Vector#firstElement,Vector#insertElementAt,Vector#lastElement,Vector#removeElement,Vector#removeElementAt,Vector#setElementAt,NoSuchElementException#NoSuchElementException"
elements,"ArrayDeque.ArrayDeque#numElements,Collections.addAll#elements,SynchronousQueue.drainTo#maxElements,Collections#hasMoreElements,Hashtable#elements,Vector#removeAllElements"
else,"OptionalLong#orElse,OptionalLong#orElseGet,OptionalLong#orElseThrow"
em,"Handler.setErrorManager#em"
empty,"StringJoiner.setEmptyValue#emptyValue,Collections#EmptyNavigableSet,Collections#emptyEnumeration,Collections#emptyIterator,Collections#emptyList,Collections#emptyListIterator,Collections#emptyMap,Collections#emptyNavigableMap,Collections#emptyNavigableSet,Collections#emptySet,Collections#emptySortedMap,Collections#emptySortedSet,Spliterators#emptyDoubleSpliterator,Spliterators#emptyIntSpliterator,Spliterators#emptyLongSpliterator,Spliterators#emptySpliterator,Stack#empty,StringJoiner#setEmptyValue,TreeSet#isEmpty,EmptyStackException#EmptyStackException"
encode,"Encoder#encode,Encoder#encodeToString"
encoder,"Base64#getEncoder,Base64#getMimeEncoder,Base64#getUrlEncoder,Encoder#Encoder"
encoding,"StreamHandler.setEncoding#encoding,Handler#getEncoding,StreamHandler#setEncoding"
end,"Arrays.stream#endExclusive,IntStream.rangeClosed#endInclusive,Matcher.region#end,SimpleTimeZone.SimpleTimeZone#endTimeMode,SimpleTimeZone.setEndRule#endDay,SimpleTimeZone.setEndRule#endDayOfWeek,SimpleTimeZone.setEndRule#endMonth,SimpleTimeZone.setEndRule#endTime,Deflater#end,Matcher#hitEnd,Matcher#regionEnd,Matcher#requireEnd,SimpleTimeZone#setEndRule"
ensure,"ArrayList#ensureCapacity"
entering,"Logger#entering"
entity,"PreferenceChangeEvent#resolveEntity"
entries,"ConcurrentHashMap#reduceEntries,ConcurrentHashMap#reduceEntriesToDouble,ConcurrentHashMap#reduceEntriesToInt,ConcurrentHashMap#reduceEntriesToLong,ConcurrentHashMap#searchEntries,Manifest#getEntries,ZipFile#entries"
entries2,"JarInputStream#entries2"
entry,"SimpleImmutableEntry.SimpleImmutableEntry#entry,Collections#ceilingEntry,Collections#entrySet,Collections#firstEntry,Collections#floorEntry,Collections#higherEntry,Collections#lastEntry,Collections#lowerEntry,Collections#pollFirstEntry,Collections#pollLastEntry,ConcurrentHashMap#forEachEntry,JarFile#getJarEntry,JarInputStream#beginEntry,JarInputStream#entryNames,JarInputStream#getNextJarEntry,ZipFile#ZipEntryIterator,ZipFile#getEntry,ZipInputStream#closeEntry,ZipInputStream#getNextEntry,ZipOutputStream#XEntry,ZipOutputStream#putNextEntry,JarEntry#JarEntry,SimpleEntry#SimpleEntry,SimpleImmutableEntry#SimpleImmutableEntry,ZipEntry#ZipEntry"
enum,"EnumMap#EnumMap,EnumSet#EnumSet"
enumeration,"Collections#emptyEnumeration,Collections#enumeration,Enumeration#Enumeration"
equals,"Arrays#deepEquals,Level#equals"
equivalents,"LanguageRange#mapEquivalents"
era,"TimeZone.getOffset#era"
error,"IllformedLocaleException.IllformedLocaleException#errorIndex,FileHandler#error,Handler#getErrorManager,Handler#setErrorManager,IllformedLocaleException#getErrorIndex,PreferenceChangeEvent#fatalError,ErrorManager#ErrorManager,ServiceConfigurationError#ServiceConfigurationError,ZipError#ZipError"
estimate,"Builder.suggestTargetSize#sizeEstimate,AbstractDoubleSpliterator#estimateSize"
evaluate,"Builder#evaluateParallel,Builder#evaluateSequential,Collectors#opEvaluateParallel"
event,"EventListener#EventListener,EventListenerProxy#EventListenerProxy,EventObject#EventObject,NodeChangeEvent#NodeChangeEvent,PreferenceChangeEvent#PreferenceChangeEvent"
ex,"FileHandler.error#ex"
exact,"Collections#getExactSizeIfKnown"
exception,"OptionalLong.orElseThrow#exceptionSupplier,AsynchronousCompletionTask#obtrudeException,ForkJoinTask#getException,ForkJoinWorkerThread#setUncaughtExceptionHandler,ForkJoinWorkerThreadFactory#getUncaughtExceptionHandler,Formatter#ioException,BackingStoreException#BackingStoreException,BrokenBarrierException#BrokenBarrierException,CancellationException#CancellationException,CompletionException#CompletionException,ConcurrentModificationException#ConcurrentModificationException,DataFormatException#DataFormatException,DuplicateFormatFlagsException#DuplicateFormatFlagsException,EmptyStackException#EmptyStackException,ExecutionException#ExecutionException,FormatFlagsConversionMismatchException#FormatFlagsConversionMismatchException,FormatterClosedException#FormatterClosedException,IllegalFormatCodePointException#IllegalFormatCodePointException,IllegalFormatConversionException#IllegalFormatConversionException,IllegalFormatException#IllegalFormatException,IllegalFormatFlagsException#IllegalFormatFlagsException,IllegalFormatPrecisionException#IllegalFormatPrecisionException,IllegalFormatWidthException#IllegalFormatWidthException,IllformedLocaleException#IllformedLocaleException,InputMismatchException#InputMismatchException,InvalidPreferencesFormatException#InvalidPreferencesFormatException,InvalidPropertiesFormatException#InvalidPropertiesFormatException,JarException#JarException,MissingFormatArgumentException#MissingFormatArgumentException,MissingFormatWidthException#MissingFormatWidthException,MissingResourceException#MissingResourceException,NoSuchElementException#NoSuchElementException,PatternSyntaxException#PatternSyntaxException,RejectedExecutionException#RejectedExecutionException,TimeoutException#TimeoutException,TooManyListenersException#TooManyListenersException,UnknownFormatConversionException#UnknownFormatConversionException,UnknownFormatFlagsException#UnknownFormatFlagsException,ZipException#ZipException"
exceptional,"CountedCompleter#onExceptionalCompletion"
exceptionally,"AsynchronousCompletionTask#completeExceptionally,AsynchronousCompletionTask#isCompletedExceptionally,CompletionStage#exceptionally"
exchange,"Exchanger#exchange"
exchanger,"Exchanger#Exchanger"
exclusive,"Arrays.stream#endExclusive,AbstractQueuedSynchronizer#getExclusiveQueuedThreads"
exec,"AsynchronousCompletionTask#exec"
execute,"Executors#execute,ScheduledThreadPoolExecutor#getExecuteExistingDelayedTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setExecuteExistingDelayedTasksAfterShutdownPolicy"
execution,"DiscardOldestPolicy#rejectedExecution,ThreadPoolExecutor#getRejectedExecutionHandler,ThreadPoolExecutor#setRejectedExecutionHandler,TimerTask#scheduledExecutionTime,ExecutionException#ExecutionException,RejectedExecutionException#RejectedExecutionException,RejectedExecutionHandler#RejectedExecutionHandler"
executor,"Executors.unconfigurableScheduledExecutorService#executor,Executors#newSingleThreadExecutor,Executors#newSingleThreadScheduledExecutor,Executors#unconfigurableExecutorService,Executors#unconfigurableScheduledExecutorService,AbstractExecutorService#AbstractExecutorService,Executor#Executor,ExecutorCompletionService#ExecutorCompletionService,ExecutorService#ExecutorService,ScheduledExecutorService#ScheduledExecutorService,ScheduledThreadPoolExecutor#ScheduledThreadPoolExecutor,ThreadPoolExecutor#ThreadPoolExecutor"
executors,"Executors#Executors"
existing,"ScheduledThreadPoolExecutor#getContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#getExecuteExistingDelayedTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setExecuteExistingDelayedTasksAfterShutdownPolicy"
exists,"AbstractPreferences#nodeExists"
exiting,"Logger#exiting"
expect,"AtomicLongArray.weakCompareAndSet#expect"
expected,"AtomicMarkableReference.attemptMark#expectedReference,AtomicMarkableReference.compareAndSet#expectedMark,AtomicStampedReference.compareAndSet#expectedStamp,CountedCompleter.compareAndSetPendingCount#expected,IdentityHashMap.IdentityHashMap#expectedMaxSize"
exponent,"Formatter#exponent"
export,"AbstractPreferences#exportNode,AbstractPreferences#exportSubtree"
extension,"Builder#setExtension,Locale#getExtension,Locale#getExtensionKeys"
extensions,"Builder#clearExtensions,Locale#hasExtensions,Locale#stripExtensions"
extra,"ZipEntry.setExtra#extra,ZipEntry#getExtra,ZipEntry#setExtra"
extractor,"Comparator.comparingDouble#keyExtractor"
factor,"LinkedHashSet.LinkedHashSet#loadFactor"
factory,"Collector.makeRef#seedFactory,Collectors.groupingByConcurrent#mapFactory,Collectors.toCollection#collectionFactory,Executors.newScheduledThreadPool#threadFactory,ForkJoinWorkerThreadFactory.ForkJoinPool#factory,StreamSupport.asArray#arrayFactory,Executors#defaultThreadFactory,Executors#privilegedThreadFactory,ForkJoinWorkerThreadFactory#getFactory,ThreadPoolExecutor#getThreadFactory,ThreadPoolExecutor#setThreadFactory,ForkJoinWorkerThreadFactory#ForkJoinWorkerThreadFactory,PreferencesFactory#PreferencesFactory,ThreadFactory#ThreadFactory"
fair,"SynchronousQueue.SynchronousQueue#fair,Semaphore#isFair"
fallback,"Control#getFallbackLocale,Control#getNoFallbackControl"
fatal,"PreferenceChangeEvent#fatalError"
fence,"Spliterators.DoubleArraySpliterator#fence"
field,"AtomicReferenceFieldUpdater.newUpdater#fieldName,Builder.setFields#fieldValuePairs,GregorianCalendar.getActualMaximum#field,AtomicIntegerFieldUpdater#AtomicIntegerFieldUpdater,AtomicLongFieldUpdater#AtomicLongFieldUpdater,AtomicReferenceFieldUpdater#AtomicReferenceFieldUpdater"
fields,"Builder#setFields"
file,"Formatter.Formatter#file,Formatter.Formatter#fileName,DeflaterInputStream#fileTimeToUnixTime,DeflaterInputStream#fileTimeToWinTime,DeflaterInputStream#unixTimeToFileTime,DeflaterInputStream#winTimeToFileTime,JarInputStream#jarFileHasClassPathAttribute,FileHandler#FileHandler,JarFile#JarFile,ZipFile#ZipFile"
fill,"Arrays#fill"
filter,"Collections.removeIf#filter,Logger.setFilter#newFilter,LanguageRange#filter,LanguageRange#filterTags,Logger#getFilter,Logger#setFilter,Filter#Filter"
find,"StreamSupport.makeDouble#mustFindFirst,Builder#findAny,Builder#findFirst,Matcher#find,Scanner#findInLine,Scanner#findWithinHorizon"
fine,"Logger#fine"
finer,"Logger#finer"
finest,"Logger#finest"
finish,"GZIPOutputStream#finish"
finished,"Deflater#finished"
finisher,"Collectors.collectingAndThen#finisher,Collectors#finisher"
first,"Arrays.compare#first,Builder.setWeekDefinition#firstDayOfWeek,Builder.setWeekDefinition#minimalDaysInFirstWeek,StreamSupport.makeDouble#mustFindFirst,Timer.scheduleAtFixedRate#firstTime,AbstractQueuedSynchronizer#getFirstQueuedThread,Builder#findFirst,Builder#setFirstDayOfWeek,Builder#setMinimalDaysInFirstWeek,CalendarDataProvider#getFirstDayOfWeek,CalendarDataProvider#getMinimalDaysInFirstWeek,Collections#firstEntry,Collections#firstKey,Collections#pollFirstEntry,Comparator#nullsFirst,CountedCompleter#firstComplete,LinkedBlockingDeque#addFirst,LinkedBlockingDeque#getFirst,LinkedBlockingDeque#offerFirst,LinkedBlockingDeque#peekFirst,LinkedBlockingDeque#putFirst,LinkedBlockingDeque#removeFirst,LinkedBlockingDeque#removeFirstOccurrence,LinkedBlockingDeque#takeFirst,Matcher#replaceFirst,TreeSet#first,TreeSet#pollFirst,Vector#firstElement"
fixed,"Executors#newFixedThreadPool,Executors#scheduleAtFixedRate,Executors#scheduleWithFixedDelay"
flags,"Pattern.compile#flags,Builder#getOpFlags,Pattern#flags,UnknownFormatFlagsException#getFlags,DuplicateFormatFlagsException#DuplicateFormatFlagsException,FormatFlagsConversionMismatchException#FormatFlagsConversionMismatchException,FormattableFlags#FormattableFlags,IllegalFormatFlagsException#IllegalFormatFlagsException,UnknownFormatFlagsException#UnknownFormatFlagsException"
flat,"Builder#flatMap,Collector#flatMapToDouble,Collector#flatMapToInt,Collector#flatMapToLong"
flatten,"BaseStream.collectDouble#flattenTree,BaseStream#flatten,BaseStream#flattenDouble,BaseStream#flattenInt,BaseStream#flattenLong"
flip,"BitSet#flip"
float,"AbstractPreferences#getFloat,AbstractPreferences#putFloat,AtomicInteger#floatValue,Scanner#hasNextFloat,ThreadLocalRandom#nextFloat"
floor,"Collections#floorEntry,Collections#floorKey,TreeSet#floor"
flush,"Deflater.deflate#flush,GZIPOutputStream.GZIPOutputStream#syncFlush,MemoryHandler#flush"
fn,"CompletionStage.handleAsync#fn"
for,"AbstractDoubleSpliterator#forEachRemaining,Arrays#forEach,Builder#forEachOrdered,ConcurrentHashMap#forEachEntry,ConcurrentHashMap#forEachKey,ConcurrentHashMap#forEachValue,Locale#forLanguageTag,Preferences#systemNodeForPackage,Preferences#userNodeForPackage"
force,"Phaser#forceTermination"
fork,"ForkJoinTask#compareAndSetForkJoinTaskTag,ForkJoinTask#fork,ForkJoinTask#getForkJoinTaskTag,ForkJoinTask#inForkJoinPool,ForkJoinTask#setForkJoinTaskTag,ForkJoinPool#ForkJoinPool,ForkJoinTask#ForkJoinTask,ForkJoinWorkerThread#ForkJoinWorkerThread,ForkJoinWorkerThreadFactory#ForkJoinWorkerThreadFactory"
form,"Formatter.BigDecimalLayout#form"
format,"Formatter.format#format,Formatter#format,Formatter#formatMessage,MissingFormatArgumentException#getFormatSpecifier,DataFormatException#DataFormatException,DuplicateFormatFlagsException#DuplicateFormatFlagsException,FormatFlagsConversionMismatchException#FormatFlagsConversionMismatchException,IllegalFormatCodePointException#IllegalFormatCodePointException,IllegalFormatConversionException#IllegalFormatConversionException,IllegalFormatException#IllegalFormatException,IllegalFormatFlagsException#IllegalFormatFlagsException,IllegalFormatPrecisionException#IllegalFormatPrecisionException,IllegalFormatWidthException#IllegalFormatWidthException,InvalidPreferencesFormatException#InvalidPreferencesFormatException,InvalidPropertiesFormatException#InvalidPropertiesFormatException,MissingFormatArgumentException#MissingFormatArgumentException,MissingFormatWidthException#MissingFormatWidthException,UnknownFormatConversionException#UnknownFormatConversionException,UnknownFormatFlagsException#UnknownFormatFlagsException"
formats,"Control.getNoFallbackControl#formats,Control#getFormats"
formattable,"Formattable#Formattable,FormattableFlags#FormattableFlags"
formatter,"Handler.setFormatter#newFormatter,StreamHandler.StreamHandler#formatter,Handler#getFormatter,Handler#setFormatter,Formatter#Formatter,FormatterClosedException#FormatterClosedException,SimpleFormatter#SimpleFormatter,XMLFormatter#XMLFormatter"
fraction,"Currency#getDefaultFractionDigits"
frequency,"Collections#frequency"
from,"Arrays.copyOfRange#from,Collections.tailMap#fromKey,Spliterators.spliterator#fromIndex,TreeSet.subSet#fromInclusive,TreeSet.tailSet#fromElement,Collections#newSetFromMap,Date#from,Properties#loadFromXML,UUID#fromString,UUID#nameUUIDFromBytes"
ftime,"DeflaterInputStream.fileTimeToUnixTime#ftime"
function,"AtomicLongArray.accumulateAndGet#accumulatorFunction,AtomicLongArray.updateAndGet#updateFunction,Collections.computeIfAbsent#mappingFunction,Collections.merge#remappingFunction,Collections.replaceAll#function,Collectors.toConcurrentMap#mergeFunction,ConcurrentHashMap.searchEntries#searchFunction,BiFunction#BiFunction,DoubleFunction#DoubleFunction,DoubleToIntFunction#DoubleToIntFunction,DoubleToLongFunction#DoubleToLongFunction,Function#Function,IntFunction#IntFunction,IntToDoubleFunction#IntToDoubleFunction,IntToLongFunction#IntToLongFunction,LongFunction#LongFunction,LongToDoubleFunction#LongToDoubleFunction,LongToIntFunction#LongToIntFunction,ToDoubleBiFunction#ToDoubleBiFunction,ToDoubleFunction#ToDoubleFunction,ToIntBiFunction#ToIntBiFunction,ToIntFunction#ToIntFunction,ToLongBiFunction#ToLongBiFunction,ToLongFunction#ToLongFunction"
future,"AsynchronousCompletionTask#completedFuture,CompletionStage#toCompletableFuture,CompletableFuture#CompletableFuture,Future#Future,FutureTask#FutureTask,RunnableFuture#RunnableFuture,RunnableScheduledFuture#RunnableScheduledFuture,ScheduledFuture#ScheduledFuture"
gaussian,"ThreadLocalRandom#nextGaussian"
generate,"DoubleStream#generate"
generator,"Arrays.parallelSetAll#generator"
generic,"TimeZoneNameProvider#getGenericDisplayName"
get,"AbstractDoubleSpliterator#getComparator,AbstractPreferences#getBoolean,AbstractPreferences#getByteArray,AbstractPreferences#getDouble,AbstractPreferences#getFloat,AbstractPreferences#getInt,AbstractPreferences#getLong,AbstractQueuedSynchronizer#getExclusiveQueuedThreads,AbstractQueuedSynchronizer#getFirstQueuedThread,AbstractQueuedSynchronizer#getQueuedThreads,AbstractQueuedSynchronizer#getSharedQueuedThreads,AbstractQueuedSynchronizer#getWaitingThreads,Arrays#get,AsynchronousCompletionTask#getNow,AsynchronousCompletionTask#getNumberOfDependents,AtomicLongArray#accumulateAndGet,AtomicLongArray#addAndGet,AtomicLongArray#decrementAndGet,AtomicLongArray#getAndAccumulate,AtomicLongArray#getAndAdd,AtomicLongArray#getAndDecrement,AtomicLongArray#getAndIncrement,AtomicLongArray#getAndSet,AtomicLongArray#getAndUpdate,AtomicLongArray#incrementAndGet,AtomicLongArray#updateAndGet,AtomicMarkableReference#getReference,AtomicStampedReference#getStamp,Base64#getDecoder,Base64#getEncoder,Base64#getMimeDecoder,Base64#getMimeEncoder,Base64#getUrlDecoder,Base64#getUrlEncoder,BaseStream#getChild,BaseStream#getChildCount,Builder#getAvailableCalendarTypes,Builder#getOpFlags,Builder#getTimeInMillis,CalendarDataProvider#getFirstDayOfWeek,CalendarDataProvider#getMinimalDaysInFirstWeek,CalendarNameProvider#getDisplayNames,CheckedOutputStream#getChecksum,Collections#getExactSizeIfKnown,Collections#getKey,Collections#getOrDefault,Collections#getValue,Collectors#getLocalResult,ConcurrentHashMap#getMap,Control#getCandidateLocales,Control#getFallbackLocale,Control#getFormats,Control#getNoFallbackControl,Control#getTimeToLive,CountDownLatch#getCount,CountedCompleter#getCompleter,CountedCompleter#getPendingCount,CountedCompleter#getRoot,Currency#getAvailableCurrencies,Currency#getCurrencyCode,Currency#getDefaultFractionDigits,Currency#getDisplayName,Currency#getInstance,Currency#getNumericCode,Currency#getObject,Currency#getSymbol,CyclicBarrier#getNumberWaiting,CyclicBarrier#getParties,Date#getDate,Date#getDay,Date#getHours,Date#getMinutes,Date#getMonth,Date#getSeconds,Date#getTime,Date#getTimezoneOffset,Date#getYear,Deflater#getAdler,Deflater#getBytesRead,Deflater#getBytesWritten,Deflater#getTotalIn,Deflater#getTotalOut,DoubleSummaryStatistics#getAverage,DoubleSummaryStatistics#getMax,DoubleSummaryStatistics#getMin,DoubleSummaryStatistics#getSum,EventListenerProxy#getListener,EventObject#getSource,FileHandler#getLevel,FileHandler#getLevelName,FileHandler#getLevelValue,FileHandler#getLogger,FileHandler#getProperty,ForkJoinTask#getException,ForkJoinTask#getForkJoinTaskTag,ForkJoinTask#getQueuedTaskCount,ForkJoinTask#getSurplusQueuedTaskCount,ForkJoinWorkerThread#getContextClassLoader,ForkJoinWorkerThread#getPool,ForkJoinWorkerThread#getPoolIndex,ForkJoinWorkerThreadFactory#getActiveThreadCount,ForkJoinWorkerThreadFactory#getAsyncMode,ForkJoinWorkerThreadFactory#getCommonPoolParallelism,ForkJoinWorkerThreadFactory#getFactory,ForkJoinWorkerThreadFactory#getParallelism,ForkJoinWorkerThreadFactory#getQueuedSubmissionCount,ForkJoinWorkerThreadFactory#getRunningThreadCount,ForkJoinWorkerThreadFactory#getStealCount,ForkJoinWorkerThreadFactory#getUncaughtExceptionHandler,FormatFlagsConversionMismatchException#getConversion,Formatter#getHead,Formatter#getTail,GregorianCalendar#getActualMaximum,GregorianCalendar#getActualMinimum,GregorianCalendar#getCalendarType,GregorianCalendar#getGreatestMinimum,GregorianCalendar#getGregorianChange,GregorianCalendar#getLeastMaximum,GregorianCalendar#getMaximum,GregorianCalendar#getMinimum,GregorianCalendar#getTimeZone,GregorianCalendar#getWeekYear,GregorianCalendar#getWeeksInWeekYear,Handler#getEncoding,Handler#getErrorManager,Handler#getFormatter,IllegalFormatCodePointException#getCodePoint,IllegalFormatConversionException#getArgumentClass,IllegalFormatPrecisionException#getPrecision,IllegalFormatWidthException#getWidth,IllformedLocaleException#getErrorIndex,Inflater#getRemaining,JarEntry#getAttributes,JarEntry#getCertificates,JarFile#getJarEntry,JarInputStream#getCerts,JarInputStream#getCodeSigners,JarInputStream#getCodeSource,JarInputStream#getCodeSources,JarInputStream#getManifest,JarInputStream#getManifestDigests,JarInputStream#getNextJarEntry,KeySetView#getMappedValue,LanguageRange#getRange,LanguageRange#getWeight,Level#getLocalizedName,Level#getLoggerLevel,Level#getLoggerNames,Level#getName,Level#getParentLoggerName,Level#getResourceBundleName,LinkedBlockingDeque#getFirst,LinkedBlockingDeque#getLast,LinkedTransferQueue#getWaitingConsumerCount,Locale#getAvailableLocales,Locale#getCountry,Locale#getDefault,Locale#getDisplayCountry,Locale#getDisplayLanguage,Locale#getDisplayScript,Locale#getDisplayVariant,Locale#getExtension,Locale#getExtensionKeys,Locale#getISO3Country,Locale#getISO3Language,Locale#getISOCountries,Locale#getISOLanguages,Locale#getLanguage,Locale#getScript,Locale#getUnicodeLocaleAttributes,Locale#getUnicodeLocaleKeys,Locale#getUnicodeLocaleType,Locale#getVariant,LockSupport#getBlocker,LogManager#getLogManager,LogManager#getLoggingMXBean,LogRecord#getLoggerName,LogRecord#getMillis,LogRecord#getParameters,LogRecord#getSequenceNumber,LogRecord#getSourceClassName,LogRecord#getSourceMethodName,LogRecord#getThreadID,LogRecord#getThrown,Logger#getAnonymousLogger,Logger#getFilter,Logger#getGlobal,Logger#getHandlers,Logger#getParent,Logger#getResourceBundle,Logger#getUseParentHandlers,LongAccumulator#getThenReset,Manifest#getEntries,Manifest#getMainAttributes,MemoryHandler#getPushLevel,MissingFormatArgumentException#getFormatSpecifier,MissingResourceException#getClassName,OfPrimitive#getAndClearState,OptionalDouble#getAsDouble,OptionalInt#getAsInt,OptionalLong#getAsLong,OptionalLong#orElseGet,PatternSyntaxException#getDescription,PatternSyntaxException#getIndex,PatternSyntaxException#getPattern,Phaser#getArrivedParties,Phaser#getPhase,Phaser#getRegisteredParties,Phaser#getUnarrivedParties,PreferenceChangeEvent#getNewValue,PreferenceChangeEvent#getNode,PropertyPermission#getActions,PropertyResourceBundle#getKeys,PropertyResourceBundle#handleGetObject,RecursiveTask#getRawResult,ReentrantLock#getHoldCount,ReentrantLock#getWaitQueueLength,ResourceBundle#getBaseBundleName,ResourceBundle#getBundle,ResourceBundle#getCacheKey,ResourceBundle#getLocale,ResourceBundle#getResource,ResourceBundle#getResourceAsStream,ResourceBundle#getString,ResourceBundle#getStringArray,ResourceBundleControlProvider#getControl,ScheduledThreadPoolExecutor#getContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#getDelay,ScheduledThreadPoolExecutor#getExecuteExistingDelayedTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#getRemoveOnCancelPolicy,Semaphore#getQueueLength,StampedLock#getReadLockCount,ThreadPoolExecutor#getActiveCount,ThreadPoolExecutor#getCompletedTaskCount,ThreadPoolExecutor#getCorePoolSize,ThreadPoolExecutor#getKeepAliveTime,ThreadPoolExecutor#getLargestPoolSize,ThreadPoolExecutor#getMaximumPoolSize,ThreadPoolExecutor#getPoolSize,ThreadPoolExecutor#getQueue,ThreadPoolExecutor#getRejectedExecutionHandler,ThreadPoolExecutor#getTaskCount,ThreadPoolExecutor#getThreadFactory,TimeZone#getAvailableIDs,TimeZone#getDSTSavings,TimeZone#getID,TimeZone#getOffset,TimeZone#getRawOffset,TimeZoneNameProvider#getGenericDisplayName,UUID#getLeastSignificantBits,UUID#getMostSignificantBits,UnknownFormatFlagsException#getFlags,UnknownFormatFlagsException#getMessage,WriteLock#getReadHoldCount,WriteLock#getWriteHoldCount,ZipEntry#getCompressedSize,ZipEntry#getCrc,ZipEntry#getCreationTime,ZipEntry#getExtra,ZipEntry#getLastAccessTime,ZipEntry#getLastModifiedTime,ZipEntry#getMethod,ZipEntry#getSize,ZipFile#getComment,ZipFile#getEntry,ZipFile#getInputStream,ZipInputStream#getNextEntry"
get16,"DeflaterInputStream#get16"
get32,"DeflaterInputStream#get32"
get64,"DeflaterInputStream#get64"
global,"Logger#getGlobal"
gmt,"Date#toGMTString"
greatest,"GregorianCalendar#getGreatestMinimum"
gregorian,"GregorianCalendar#getGregorianChange,GregorianCalendar#setGregorianChange,GregorianCalendar#GregorianCalendar"
group,"MatchResult.group#group,MatchResult#group,MatchResult#groupCount"
grouping,"Collectors#groupingBy,Collectors#groupingByConcurrent"
gzip,"GZIPInputStream#GZIPInputStream,GZIPOutputStream#GZIPOutputStream"
handle,"CompletionStage#handle,CompletionStage#handleAsync,PropertyResourceBundle#handleGetObject"
handler,"Logger.removeHandler#handler,StreamSupport.onClose#closeHandler,ForkJoinWorkerThread#setUncaughtExceptionHandler,ForkJoinWorkerThreadFactory#getUncaughtExceptionHandler,LogManager#addHandler,LogManager#removeHandler,ThreadPoolExecutor#getRejectedExecutionHandler,ThreadPoolExecutor#setRejectedExecutionHandler,ConsoleHandler#ConsoleHandler,FileHandler#FileHandler,Handler#Handler,MemoryHandler#MemoryHandler,RejectedExecutionHandler#RejectedExecutionHandler,SocketHandler#SocketHandler,StreamHandler#StreamHandler"
handlers,"Logger.setUseParentHandlers#useParentHandlers,Logger#getHandlers,Logger#getUseParentHandlers,Logger#setUseParentHandlers"
has,"AbstractQueuedSynchronizer#hasContended,AbstractQueuedSynchronizer#hasQueuedPredecessors,Collections#hasCharacteristics,Collections#hasMoreElements,Collections#hasPrevious,ForkJoinWorkerThreadFactory#hasQueuedSubmissions,Formatter#hasDot,JarInputStream#jarFileHasClassPathAttribute,LinkedTransferQueue#hasWaitingConsumer,Locale#hasExtensions,Matcher#hasAnchoringBounds,Matcher#hasTransparentBounds,Observable#hasChanged,ReentrantLock#hasQueuedThread,ReentrantLock#hasWaiters,Scanner#hasNextBigDecimal,Scanner#hasNextBigInteger,Scanner#hasNextBoolean,Scanner#hasNextByte,Scanner#hasNextDouble,Scanner#hasNextFloat,Scanner#hasNextInt,Scanner#hasNextLine,Scanner#hasNextLong,Scanner#hasNextShort,Semaphore#hasQueuedThreads,ServiceLoader#hasNext,StringTokenizer#hasMoreTokens,TimeZone#hasSameRules"
hash,"Arrays#deepHashCode,Level#hashCode,Objects#hash,ConcurrentHashMap#ConcurrentHashMap,HashMap#HashMap,HashSet#HashSet,IdentityHashMap#IdentityHashMap,LinkedHashMap#LinkedHashMap,LinkedHashSet#LinkedHashSet,WeakHashMap#WeakHashMap"
hashtable,"Hashtable#Hashtable"
head,"Collections#headMap,Formatter#getHead,TreeSet#headSet"
header,"ZipFile#startsWithLocHeader"
held,"ReentrantLock#isHeldByCurrentThread"
help,"CountedCompleter#helpComplete,ForkJoinTask#helpQuiesce"
helper,"Collectors.opEvaluateParallel#helper"
hi,"Hashtable.IntCumulateTask#hi"
higher,"Collections#higherEntry,Collections#higherKey,TreeSet#higher"
hit,"Matcher#hitEnd"
hold,"ReentrantLock#getHoldCount,WriteLock#getReadHoldCount,WriteLock#getWriteHoldCount"
holder,"AtomicMarkableReference.get#markHolder,AtomicStampedReference.get#stampHolder"
horizon,"Scanner.findWithinHorizon#horizon,Scanner#findWithinHorizon"
host,"SocketHandler.SocketHandler#host"
hour,"GregorianCalendar.GregorianCalendar#hourOfDay"
hours,"Date.setHours#hours,Date#getHours,Date#setHours"
hrs,"Date.UTC#hrs"
i,"TimeZone#getAvailableIDs"
id,"LogRecord.setThreadID#threadID,TimeZone.getTimeZone#zoneId,TimeZoneNameProvider.getGenericDisplayName#ID,LogRecord#getThreadID,LogRecord#setThreadID,TimeZone#getID,TimeZone#setID,TimeZone#toZoneId"
identity,"LongAccumulator.LongAccumulator#identity,IdentityHashMap#IdentityHashMap"
if,"AsynchronousCompletionTask.getNow#valueIfAbsent,FutureTask.cancel#mayInterruptIfRunning,Collections#computeIfAbsent,Collections#computeIfPresent,Collections#getExactSizeIfKnown,Collections#putIfAbsent,Collections#removeIf,CopyOnWriteArrayList#addIfAbsent,OptionalLong#ifPresent"
illegal,"IllegalFormatCodePointException#IllegalFormatCodePointException,IllegalFormatConversionException#IllegalFormatConversionException,IllegalFormatException#IllegalFormatException,IllegalFormatFlagsException#IllegalFormatFlagsException,IllegalFormatPrecisionException#IllegalFormatPrecisionException,IllegalFormatWidthException#IllegalFormatWidthException"
illformed,"IllformedLocaleException#IllformedLocaleException"
immutable,"SimpleImmutableEntry#SimpleImmutableEntry"
implies,"PropertyPermission#implies"
import,"Preferences#importPreferences"
in,"Builder.setWeekDefinition#minimalDaysInFirstWeek,CopyOnWriteArrayList.CopyOnWriteArrayList#toCopyIn,Locale.getDisplayName#inLocale,Properties.LineReader#inStream,Properties.loadFromXML#in,Builder#getTimeInMillis,Builder#setMinimalDaysInFirstWeek,Builder#setTimeInMillis,CalendarDataProvider#getMinimalDaysInFirstWeek,Deflater#getTotalIn,ForkJoinTask#inForkJoinPool,GregorianCalendar#getWeeksInWeekYear,Scanner#findInLine,TimeZone#inDaylightTime"
inclusive,"Arrays.stream#startInclusive,IntStream.rangeClosed#endInclusive,TreeSet.subSet#fromInclusive,TreeSet.subSet#toInclusive,TreeSet.tailSet#inclusive"
increment,"Vector.Vector#capacityIncrement,AtomicLongArray#getAndIncrement,AtomicLongArray#incrementAndGet,LongAdder#increment"
index,"Arrays.set#index,BitSet.get#bitIndex,IllformedLocaleException.IllformedLocaleException#errorIndex,Spliterators.spliterator#fromIndex,Spliterators.spliterator#toIndex,Arrays#indexOf,Collections#indexOfSubList,Collections#lastIndexOf,Collections#lastIndexOfSubList,Collections#nextIndex,Collections#previousIndex,ForkJoinWorkerThread#getPoolIndex,Formatter#index,IllformedLocaleException#getErrorIndex,PatternSyntaxException#getIndex"
inf,"InflaterInputStream.InflaterInputStream#inf"
infl,"InflaterOutputStream.InflaterOutputStream#infl"
inflate,"Inflater#inflate"
inflater,"Inflater#Inflater,InflaterInputStream#InflaterInputStream,InflaterOutputStream#InflaterOutputStream"
info,"Logger#info"
initial,"AtomicMarkableReference.AtomicMarkableReference#initialMark,AtomicMarkableReference.AtomicMarkableReference#initialRef,AtomicReference.AtomicReference#initialValue,AtomicStampedReference.AtomicStampedReference#initialStamp,Executors.scheduleWithFixedDelay#initialDelay,LinkedHashSet.LinkedHashSet#initialCapacity,Exchanger#initialValue"
input,"Pattern.splitAsStream#input,Builder#inputShape,Deflater#needsInput,Deflater#setInput,ZipFile#getInputStream,CheckedInputStream#CheckedInputStream,DeflaterInputStream#DeflaterInputStream,GZIPInputStream#GZIPInputStream,InflaterInputStream#InflaterInputStream,InputMismatchException#InputMismatchException,JarInputStream#JarInputStream,ZipInputStream#ZipInputStream"
ins,"LogManager.readConfiguration#ins"
insert,"Vector#insertElementAt"
installed,"ServiceLoader#loadInstalled"
instance,"Currency#getInstance"
instant,"Date.from#instant,Builder#setInstant,Date#toInstant"
int,"Formatter.BigDecimalLayout#intVal,AbstractDoubleSpliterator#IntIteratorSpliterator,AbstractPreferences#getInt,AbstractPreferences#putInt,BaseStream#collectInt,BaseStream#flattenInt,Builder#makeInt,Builder#mapToInt,Collector#ChainedInt,Collector#flatMapToInt,Collectors#averagingInt,Collectors#summarizingInt,Collectors#summingInt,Comparator#comparingInt,ConcurrentHashMap#reduceEntriesToInt,ConcurrentHashMap#reduceKeysToInt,ConcurrentHashMap#reduceToInt,ConcurrentHashMap#reduceValuesToInt,Hashtable#IntCumulateTask,Level#intValue,OptionalInt#getAsInt,Scanner#hasNextInt,Spliterators#IntArraySpliterator,Spliterators#emptyIntSpliterator,Spliterators#nextInt,StreamSupport#intStream,AbstractIntSpliterator#AbstractIntSpliterator,DoubleToIntFunction#DoubleToIntFunction,IntBinaryOperator#IntBinaryOperator,IntConsumer#IntConsumer,IntFunction#IntFunction,IntPredicate#IntPredicate,IntStream#IntStream,IntSummaryStatistics#IntSummaryStatistics,IntSupplier#IntSupplier,IntToDoubleFunction#IntToDoubleFunction,IntToLongFunction#IntToLongFunction,IntUnaryOperator#IntUnaryOperator,LongToIntFunction#LongToIntFunction,ObjIntConsumer#ObjIntConsumer,OfInt#OfInt,OptionalInt#OptionalInt,ToIntBiFunction#ToIntBiFunction,ToIntFunction#ToIntFunction"
integer,"Scanner#hasNextBigInteger,Scanner#nextBigInteger,AtomicInteger#AtomicInteger,AtomicIntegerArray#AtomicIntegerArray,AtomicIntegerFieldUpdater#AtomicIntegerFieldUpdater"
interrupt,"FutureTask.cancel#mayInterruptIfRunning"
interruptibly,"AbstractQueuedSynchronizer#acquireInterruptibly,AbstractQueuedSynchronizer#acquireSharedInterruptibly,Phaser#awaitAdvanceInterruptibly,StampedLock#lockInterruptibly,StampedLock#readLockInterruptibly,StampedLock#writeLockInterruptibly"
intersects,"BitSet#intersects"
into,"StreamSupport#copyInto"
ints,"SplittableRandom#ints"
invalid,"InvalidPreferencesFormatException#InvalidPreferencesFormatException,InvalidPropertiesFormatException#InvalidPropertiesFormatException"
invoke,"Executors#invokeAll,Executors#invokeAny,ForkJoinTask#invoke,ForkJoinTask#quietlyInvoke"
io,"Formatter#ioException"
is,"Manifest.read#is,Timer.Timer#isDaemon,AbstractPreferences#isUserNode,AbstractQueuedSynchronizer#isQueued,AsynchronousCompletionTask#isCompletedExceptionally,AsynchronousCompletionTask#isReleasable,AtomicMarkableReference#isMarked,Builder#isLenient,Builder#isSet,CyclicBarrier#isBroken,Executors#isShutdown,Executors#isTerminated,Filter#isLoggable,ForkJoinTask#isCompletedAbnormally,ForkJoinTask#isCompletedNormally,ForkJoinWorkerThreadFactory#isQuiescent,FutureTask#isCancelled,FutureTask#isDone,GregorianCalendar#isLeapYear,GregorianCalendar#isWeekDateSupported,LocaleServiceProvider#isSupportedLocale,Objects#isNull,OptionalLong#isPresent,ReentrantLock#isHeldByCurrentThread,ScheduledThreadPoolExecutor#isPeriodic,Semaphore#isFair,StampedLock#isReadLocked,StampedLock#isWriteLocked,StreamSupport#isParallel,ThreadPoolExecutor#isLocked,ThreadPoolExecutor#isTerminating,TreeSet#isEmpty,WriteLock#isWriteLockedByCurrentThread,ZipEntry#isDirectory"
iso,"Locale#getISOCountries,Locale#getISOLanguages"
iso3,"Locale#getISO3Country,Locale#getISO3Language"
item,"Stack.push#item"
iterate,"DoubleStream#iterate"
iterator,"AbstractDoubleSpliterator.DoubleIteratorSpliterator#iterator,AbstractDoubleSpliterator#DoubleIteratorSpliterator,AbstractDoubleSpliterator#IntIteratorSpliterator,AbstractDoubleSpliterator#IteratorSpliterator,AbstractDoubleSpliterator#LongIteratorSpliterator,Collections#emptyIterator,Collections#emptyListIterator,Collections#listIterator,ServiceLoader#iterator,TreeSet#descendingIterator,ZipFile#ZipEntryIterator,Iterator#Iterator,ListIterator#ListIterator,PrimitiveIterator#PrimitiveIterator"
jar,"JarInputStream.getCodeSource#jar,JarFile#getJarEntry,JarInputStream#JarVerifier,JarInputStream#getNextJarEntry,JarInputStream#jarFileHasClassPathAttribute,JarEntry#JarEntry,JarException#JarException,JarFile#JarFile,JarInputStream#JarInputStream,JarOutputStream#JarOutputStream"
java,"DeflaterInputStream#dosToJavaTime,DeflaterInputStream#javaToDosTime"
je,"JarInputStream.getCodeSource#je"
join,"AsynchronousCompletionTask#join,ForkJoinTask#compareAndSetForkJoinTaskTag,ForkJoinTask#getForkJoinTaskTag,ForkJoinTask#inForkJoinPool,ForkJoinTask#quietlyJoin,ForkJoinTask#setForkJoinTaskTag,ForkJoinPool#ForkJoinPool,ForkJoinTask#ForkJoinTask,ForkJoinWorkerThread#ForkJoinWorkerThread,ForkJoinWorkerThreadFactory#ForkJoinWorkerThreadFactory"
joiner,"StringJoiner#StringJoiner"
joining,"Collectors#joining"
keep,"ThreadPoolExecutor.ThreadPoolExecutor#keepAliveTime,ThreadPoolExecutor#getKeepAliveTime,ThreadPoolExecutor#setKeepAliveTime"
key,"Collections.checkedNavigableMap#keyType,Collections.headMap#toKey,Collections.tailMap#fromKey,Collectors.toConcurrentMap#keyMapper,Comparator.comparing#keyComparator,Comparator.comparingDouble#keyExtractor,FileHandler.getProperty#key,Collections#ceilingKey,Collections#containsKey,Collections#descendingKeySet,Collections#firstKey,Collections#floorKey,Collections#getKey,Collections#higherKey,Collections#keySet,Collections#lastKey,Collections#lowerKey,Collections#navigableKeySet,ConcurrentHashMap#forEachKey,ConcurrentHashMap#newKeySet,Map#comparingByKey,ResourceBundle#getCacheKey,KeySetView#KeySetView"
keys,"ConcurrentHashMap#reduceKeys,ConcurrentHashMap#reduceKeysToDouble,ConcurrentHashMap#reduceKeysToInt,ConcurrentHashMap#reduceKeysToLong,ConcurrentHashMap#searchKeys,Hashtable#keys,Locale#getExtensionKeys,Locale#getUnicodeLocaleKeys,PropertyResourceBundle#getKeys"
keyword,"Builder#setUnicodeLocaleKeyword"
kind,"OfPrimitive.makeDouble#matchKind"
known,"Collections#getExactSizeIfKnown"
language,"Builder.setLanguage#language,Builder.setLanguageTag#languageTag,LocaleNameProvider.getDisplayLanguage#languageCode,Builder#setLanguage,Builder#setLanguageTag,Locale#forLanguageTag,Locale#getDisplayLanguage,Locale#getISO3Language,Locale#getLanguage,Locale#toLanguageTag,LanguageRange#LanguageRange"
languages,"Locale#getISOLanguages"
largest,"ThreadPoolExecutor#getLargestPoolSize"
last,"Collections#lastEntry,Collections#lastIndexOf,Collections#lastIndexOfSubList,Collections#lastKey,Collections#pollLastEntry,Comparator#nullsLast,LinkedBlockingDeque#addLast,LinkedBlockingDeque#getLast,LinkedBlockingDeque#offerLast,LinkedBlockingDeque#peekLast,LinkedBlockingDeque#putLast,LinkedBlockingDeque#removeLast,LinkedBlockingDeque#removeLastOccurrence,LinkedBlockingDeque#takeLast,TreeSet#last,TreeSet#pollLast,Vector#lastElement,ZipEntry#getLastAccessTime,ZipEntry#getLastModifiedTime,ZipEntry#setLastAccessTime,ZipEntry#setLastModifiedTime"
latch,"CountDownLatch#CountDownLatch"
layout,"Formatter#BigDecimalLayout,Formatter#layoutChars"
lazy,"AtomicLongArray#lazySet"
lb,"BitSet.valueOf#lb"
leap,"GregorianCalendar#isLeapYear"
least,"UUID.UUID#leastSigBits,GregorianCalendar#getLeastMaximum,UUID#getLeastSignificantBits"
len,"DeflaterInputStream.DeflaterInputStream#bufLen,FileHandler.write#len"
length,"Arrays.copyOf#newLength,AtomicLongArray.AtomicLongArray#length,Base64.getMimeEncoder#lineLength,ReentrantLock#getWaitQueueLength,Semaphore#getQueueLength,StringJoiner#length"
lenient,"Builder.setLenient#lenient,Builder#isLenient,Builder#setLenient"
level,"ConcurrentHashMap.ConcurrentHashMap#concurrencyLevel,FileHandler.getLevelValue#level,Level.setLoggerLevel#levelName,MemoryHandler.MemoryHandler#pushLevel,MemoryHandler.setPushLevel#newLevel,FileHandler#getLevel,FileHandler#getLevelName,FileHandler#getLevelValue,FileHandler#parseLevel,FileHandler#setLevel,Level#getLoggerLevel,Level#setLoggerLevel,MemoryHandler#getPushLevel,MemoryHandler#setPushLevel,Level#Level"
lifo,"Collections#asLifoQueue"
limit,"FileHandler.FileHandler#limit,Builder#limit"
line,"Base64.getMimeEncoder#lineLength,Base64.getMimeEncoder#lineSeparator,Manifest#readLine,Properties#LineReader,Scanner#findInLine,Scanner#hasNextLine,Scanner#nextLine"
linked,"ConcurrentLinkedDeque#ConcurrentLinkedDeque,ConcurrentLinkedQueue#ConcurrentLinkedQueue,LinkedBlockingDeque#LinkedBlockingDeque,LinkedBlockingQueue#LinkedBlockingQueue,LinkedHashMap#LinkedHashMap,LinkedHashSet#LinkedHashSet,LinkedList#LinkedList,LinkedTransferQueue#LinkedTransferQueue"
list,"Collections.checkedList#list,LanguageRange.lookupTag#priorityList,Arrays#asList,Collections#checkedList,Collections#emptyList,Collections#emptyListIterator,Collections#indexOfSubList,Collections#lastIndexOfSubList,Collections#list,Collections#listIterator,Collections#singletonList,Collections#subList,Collections#synchronizedList,Collections#unmodifiableList,Collectors#toList,AbstractList#AbstractList,AbstractSequentialList#AbstractSequentialList,ArrayList#ArrayList,ConcurrentSkipListMap#ConcurrentSkipListMap,ConcurrentSkipListSet#ConcurrentSkipListSet,CopyOnWriteArrayList#CopyOnWriteArrayList,LinkedList#LinkedList,List#List,ListIterator#ListIterator,ListResourceBundle#ListResourceBundle"
listener,"EventListenerProxy.EventListenerProxy#listener,AbstractPreferences#addNodeChangeListener,AbstractPreferences#addPreferenceChangeListener,AbstractPreferences#removeNodeChangeListener,AbstractPreferences#removePreferenceChangeListener,EventListenerProxy#getListener,LogManager#addPropertyChangeListener,LogManager#removePropertyChangeListener,EventListener#EventListener,EventListenerProxy#EventListenerProxy,NodeChangeListener#NodeChangeListener,PreferenceChangeListener#PreferenceChangeListener"
listeners,"TooManyListenersException#TooManyListenersException"
live,"Control#getTimeToLive"
lo,"Hashtable.IntCumulateTask#lo"
load,"Control.needsReload#loadTime,LinkedHashSet.LinkedHashSet#loadFactor,Properties#loadFromXML,ResourceBundle#loadClass,ServiceLoader#load,ServiceLoader#loadInstalled"
loader,"ServiceLoader.load#loader,Executors#privilegedCallableUsingCurrentClassLoader,ForkJoinWorkerThread#getContextClassLoader,ForkJoinWorkerThread#setContextClassLoader,ServiceLoader#ServiceLoader"
loc,"ZipFile#startsWithLocHeader"
local,"Collectors#getLocalResult,ThreadLocalRandom#ThreadLocalRandom"
locale,"Currency.getObject#locale,GregorianCalendar.GregorianCalendar#aLocale,Locale.getDisplayName#inLocale,Locale.getObject#localeNameProvider,Locale.setDefault#newLocale,ResourceBundle.getBundle#targetLocale,Builder#addUnicodeLocaleAttribute,Builder#removeUnicodeLocaleAttribute,Builder#setLocale,Builder#setUnicodeLocaleKeyword,Control#getFallbackLocale,Date#toLocaleString,Formatter#locale,Locale#getUnicodeLocaleAttributes,Locale#getUnicodeLocaleKeys,Locale#getUnicodeLocaleType,LocaleServiceProvider#isSupportedLocale,ResourceBundle#getLocale,Scanner#useLocale,IllformedLocaleException#IllformedLocaleException,Locale#Locale,LocaleNameProvider#LocaleNameProvider,LocaleServiceProvider#LocaleServiceProvider"
locales,"LanguageRange.lookup#locales,Control#getCandidateLocales,Locale#getAvailableLocales"
localized,"Level#getLocalizedName"
lock,"StampedLock#asReadLock,StampedLock#asReadWriteLock,StampedLock#asWriteLock,StampedLock#getReadLockCount,StampedLock#lockInterruptibly,StampedLock#readLock,StampedLock#readLockInterruptibly,StampedLock#tryConvertToReadLock,StampedLock#tryConvertToWriteLock,StampedLock#tryReadLock,StampedLock#tryWriteLock,StampedLock#writeLock,StampedLock#writeLockInterruptibly,ThreadPoolExecutor#lock,ThreadPoolExecutor#tryLock,Lock#Lock,LockSupport#LockSupport,ReadLock#ReadLock,ReadWriteLock#ReadWriteLock,ReentrantLock#ReentrantLock,ReentrantReadWriteLock#ReentrantReadWriteLock,StampedLock#StampedLock,WriteLock#WriteLock"
locked,"StampedLock#isReadLocked,StampedLock#isWriteLocked,ThreadPoolExecutor#isLocked,WriteLock#isWriteLockedByCurrentThread"
log,"FileHandler#log,LogManager#getLogManager,LogManager#LogManager,LogRecord#LogRecord"
loggable,"Filter#isLoggable"
logger,"FileHandler.log#logger,Level.getParentLoggerName#loggerName,FileHandler#getLogger,Level#getLoggerLevel,Level#getLoggerNames,Level#getParentLoggerName,Level#setLoggerLevel,LogManager#addLogger,LogRecord#getLoggerName,LogRecord#setLoggerName,Logger#getAnonymousLogger,Logger#Logger"
logging,"LogManager#getLoggingMXBean,LoggingMXBean#LoggingMXBean,LoggingPermission#LoggingPermission"
logp,"Logger#logp"
logrb,"Logger#logrb"
long,"AbstractDoubleSpliterator#LongIteratorSpliterator,AbstractPreferences#getLong,AbstractPreferences#putLong,AtomicInteger#longValue,BaseStream#asLongStream,BaseStream#collectLong,BaseStream#flattenLong,BitSet#toLongArray,Builder#makeLong,Collector#ChainedLong,Collector#flatMapToLong,Collector#mapToLong,Collectors#averagingLong,Collectors#summarizingLong,Collectors#summingLong,Comparator#comparingLong,ConcurrentHashMap#reduceEntriesToLong,ConcurrentHashMap#reduceKeysToLong,ConcurrentHashMap#reduceToLong,ConcurrentHashMap#reduceValuesToLong,Hashtable#LongCumulateTask,OptionalLong#getAsLong,Scanner#hasNextLong,Spliterators#LongArraySpliterator,Spliterators#emptyLongSpliterator,Spliterators#nextLong,StreamSupport#longStream,AbstractLongSpliterator#AbstractLongSpliterator,AbstractQueuedLongSynchronizer#AbstractQueuedLongSynchronizer,AtomicLong#AtomicLong,AtomicLongArray#AtomicLongArray,AtomicLongFieldUpdater#AtomicLongFieldUpdater,DoubleToLongFunction#DoubleToLongFunction,IntToLongFunction#IntToLongFunction,LongAccumulator#LongAccumulator,LongAdder#LongAdder,LongBinaryOperator#LongBinaryOperator,LongConsumer#LongConsumer,LongFunction#LongFunction,LongPredicate#LongPredicate,LongStream#LongStream,LongSummaryStatistics#LongSummaryStatistics,LongSupplier#LongSupplier,LongToDoubleFunction#LongToDoubleFunction,LongToIntFunction#LongToIntFunction,LongUnaryOperator#LongUnaryOperator,ObjLongConsumer#ObjLongConsumer,OfLong#OfLong,OptionalLong#OptionalLong,ToLongBiFunction#ToLongBiFunction,ToLongFunction#ToLongFunction"
longs,"BitSet.valueOf#longs,SplittableRandom#longs"
looking,"Matcher#lookingAt"
lookup,"LanguageRange#lookup,LanguageRange#lookupTag"
lower,"Collections#lowerEntry,Collections#lowerKey,TreeSet#lower"
main,"Manifest#getMainAttributes,Preferences#main"
make,"Builder#makeDouble,Builder#makeInt,Builder#makeLong,Builder#makeRef,Collector#makeSink"
man,"JarOutputStream.JarOutputStream#man"
managed,"ManagedBlocker#managedBlock,ManagedBlocker#ManagedBlocker"
manager,"Handler#getErrorManager,Handler#setErrorManager,LogManager#getLogManager,ErrorManager#ErrorManager,LogManager#LogManager"
manifest,"JarInputStream#getManifest,JarInputStream#getManifestDigests,Manifest#Manifest"
mantissa,"Formatter#mantissa"
many,"TooManyListenersException#TooManyListenersException"
map,"Collections.newSetFromMap#map,Collectors.groupingByConcurrent#mapFactory,Collectors.toConcurrentMap#mapSupplier,Builder#flatMap,Builder#map,Builder#mapToDouble,Builder#mapToInt,Builder#mapToObj,Collections#checkedMap,Collections#checkedNavigableMap,Collections#checkedSortedMap,Collections#descendingMap,Collections#emptyMap,Collections#emptyNavigableMap,Collections#emptySortedMap,Collections#headMap,Collections#newSetFromMap,Collections#singletonMap,Collections#subMap,Collections#synchronizedMap,Collections#synchronizedNavigableMap,Collections#synchronizedSortedMap,Collections#tailMap,Collections#unmodifiableMap,Collections#unmodifiableNavigableMap,Collections#unmodifiableSortedMap,Collector#flatMapToDouble,Collector#flatMapToInt,Collector#flatMapToLong,Collector#mapToLong,Collectors#toConcurrentMap,Collectors#toMap,ConcurrentHashMap#getMap,LanguageRange#mapEquivalents,AbstractMap#AbstractMap,ConcurrentHashMap#ConcurrentHashMap,ConcurrentMap#ConcurrentMap,ConcurrentNavigableMap#ConcurrentNavigableMap,ConcurrentSkipListMap#ConcurrentSkipListMap,EnumMap#EnumMap,HashMap#HashMap,IdentityHashMap#IdentityHashMap,LinkedHashMap#LinkedHashMap,Map#Map,NavigableMap#NavigableMap,SortedMap#SortedMap,TreeMap#TreeMap,WeakHashMap#WeakHashMap"
mapped,"ConcurrentHashMap.keySet#mappedValue,KeySetView#getMappedValue"
mapper,"Collectors.summarizingDouble#mapper,Collectors.toConcurrentMap#keyMapper,Collectors.toConcurrentMap#valueMapper"
mapping,"Collections.computeIfAbsent#mappingFunction,Collectors#mapping,ConcurrentHashMap#mappingCount"
mark,"AtomicMarkableReference.AtomicMarkableReference#initialMark,AtomicMarkableReference.attemptMark#newMark,AtomicMarkableReference.compareAndSet#expectedMark,AtomicMarkableReference.get#markHolder,AtomicMarkableReference#attemptMark,DeflaterInputStream#mark,DeflaterInputStream#markSupported"
markable,"AtomicMarkableReference#AtomicMarkableReference"
marked,"AtomicMarkableReference#isMarked"
match,"OfPrimitive.makeDouble#matchKind,Builder#allMatch,Builder#anyMatch,Builder#noneMatch,Matcher#toMatchResult,Scanner#match,MatchResult#MatchResult"
matcher,"Pattern#matcher,Matcher#Matcher"
matches,"Pattern#matches"
max,"Builder.limit#maxSize,CountedCompleter.helpComplete#maxTasks,IdentityHashMap.IdentityHashMap#expectedMaxSize,SynchronousQueue.drainTo#maxElements,BinaryOperator#maxBy,Collections#max,DoubleSummaryStatistics#getMax"
maximum,"ThreadPoolExecutor.setMaximumPoolSize#maximumPoolSize,GregorianCalendar#getActualMaximum,GregorianCalendar#getLeastMaximum,GregorianCalendar#getMaximum,ThreadPoolExecutor#getMaximumPoolSize,ThreadPoolExecutor#setMaximumPoolSize"
may,"FutureTask.cancel#mayInterruptIfRunning"
memory,"MemoryHandler#MemoryHandler"
merge,"Collectors.toConcurrentMap#mergeFunction,StringJoiner#merge"
message,"LogRecord.setMessage#message,Objects.requireNonNull#messageSupplier,Formatter#formatMessage,LogRecord#setMessage,UnknownFormatFlagsException#getMessage"
method,"LogRecord.setSourceMethodName#sourceMethodName,Logger.throwing#sourceMethod,ZipEntry.setMethod#method,LogRecord#getSourceMethodName,LogRecord#setSourceMethodName,ZipEntry#getMethod,ZipEntry#setMethod"
mev,"JarInputStream.update#mev"
millis,"LogRecord.setMillis#millis,SimpleTimeZone.setDSTSavings#millisSavedDuringDST,TimeZone.setRawOffset#offsetMillis,Builder#getTimeInMillis,Builder#setTimeInMillis,LogRecord#getMillis,LogRecord#setMillis"
milliseconds,"TimeZone.getOffset#milliseconds"
mime,"Base64#getMimeDecoder,Base64#getMimeEncoder"
min,"ArrayList.ensureCapacity#minCapacity,Date.UTC#min,BinaryOperator#minBy,Collections#min,DoubleSummaryStatistics#getMin"
minimal,"Builder.setWeekDefinition#minimalDaysInFirstWeek,Builder#setMinimalDaysInFirstWeek,CalendarDataProvider#getMinimalDaysInFirstWeek"
minimum,"GregorianCalendar#getActualMinimum,GregorianCalendar#getGreatestMinimum,GregorianCalendar#getMinimum"
minute,"GregorianCalendar.GregorianCalendar#minute"
minutes,"Date.setMinutes#minutes,Date#getMinutes,Date#setMinutes"
mismatch,"FormatFlagsConversionMismatchException#FormatFlagsConversionMismatchException,InputMismatchException#InputMismatchException"
missing,"MissingFormatArgumentException#MissingFormatArgumentException,MissingFormatWidthException#MissingFormatWidthException,MissingResourceException#MissingResourceException"
mode,"ForkJoinWorkerThreadFactory.ForkJoinPool#asyncMode,LanguageRange.filterTags#mode,SimpleTimeZone.SimpleTimeZone#endTimeMode,SimpleTimeZone.SimpleTimeZone#startTimeMode,ForkJoinWorkerThreadFactory#getAsyncMode"
modification,"ConcurrentModificationException#ConcurrentModificationException"
modified,"ZipEntry#getLastModifiedTime,ZipEntry#setLastModifiedTime"
month,"Date.setMonth#month,GregorianCalendar.GregorianCalendar#dayOfMonth,SimpleTimeZone.setEndRule#endMonth,SimpleTimeZone.setStartRule#startMonth,Date#getMonth,Date#setMonth"
more,"Collections#hasMoreElements,StringTokenizer#hasMoreTokens"
most,"UUID.UUID#mostSigBits,UUID#getMostSignificantBits"
msg,"FileHandler.log#msg,Logger.finest#msgSupplier"
must,"StreamSupport.makeDouble#mustFindFirst"
mx,"LogManager#getLoggingMXBean,LoggingMXBean#LoggingMXBean"
n,"Executors.newFixedThreadPool#nThreads,Collections#nCopies"
name,"AtomicReferenceFieldUpdater.newUpdater#fieldName,Currency.getObject#currencyNameProvider,Formatter.Formatter#fileName,Level.getParentLoggerName#loggerName,Level.parse#name,Level.setLoggerLevel#levelName,Locale.getObject#localeNameProvider,LogRecord.setSourceClassName#sourceClassName,LogRecord.setSourceMethodName#sourceMethodName,Logger.getAnonymousLogger#resourceBundleName,Logger.logrb#bundleName,MissingResourceException.MissingResourceException#className,Preferences.nodeExists#pathName,ResourceBundleControlProvider.getControl#baseName,Scanner.Scanner#charsetName,AbstractPreferences#name,Control#toBundleName,Control#toResourceName,Currency#getDisplayName,FileHandler#getLevelName,Level#getLocalizedName,Level#getName,Level#getParentLoggerName,Level#getResourceBundleName,LogRecord#getLoggerName,LogRecord#getSourceClassName,LogRecord#getSourceMethodName,LogRecord#setLoggerName,LogRecord#setResourceBundleName,LogRecord#setSourceClassName,LogRecord#setSourceMethodName,MissingResourceException#getClassName,ResourceBundle#getBaseBundleName,TimeZoneNameProvider#getGenericDisplayName,UUID#nameUUIDFromBytes,CalendarNameProvider#CalendarNameProvider,CurrencyNameProvider#CurrencyNameProvider,LocaleNameProvider#LocaleNameProvider,Name#Name,TimeZoneNameProvider#TimeZoneNameProvider"
names,"AbstractPreferences#childrenNames,CalendarNameProvider#getDisplayNames,JarInputStream#entryNames,Level#getLoggerNames,Properties#propertyNames,Properties#stringPropertyNames"
nanos,"ConditionObject.awaitNanos#nanosTimeout,LockSupport.parkNanos#nanos,AbstractQueuedSynchronizer#tryAcquireNanos,AbstractQueuedSynchronizer#tryAcquireSharedNanos,ConditionObject#awaitNanos,LockSupport#parkNanos"
natural,"Comparator#naturalOrder"
navigable,"Collections#EmptyNavigableSet,Collections#checkedNavigableMap,Collections#checkedNavigableSet,Collections#emptyNavigableMap,Collections#emptyNavigableSet,Collections#navigableKeySet,Collections#synchronizedNavigableMap,Collections#synchronizedNavigableSet,Collections#unmodifiableNavigableMap,Collections#unmodifiableNavigableSet,ConcurrentNavigableMap#ConcurrentNavigableMap,NavigableMap#NavigableMap,NavigableSet#NavigableSet"
nbits,"BitSet.BitSet#nbits"
ncl,"AbstractPreferences.removeNodeChangeListener#ncl"
needs,"Control#needsReload,Deflater#needsInput,Inflater#needsDictionary"
new,"Arrays.copyOf#newLength,Arrays.copyOfRange#newType,AtomicMarkableReference.attemptMark#newMark,AtomicMarkableReference.set#newReference,AtomicStampedReference.attemptStamp#newStamp,Collections.replace#newValue,Collections.replaceAll#newVal,Handler.setFormatter#newFormatter,Locale.setDefault#newLocale,Logger.setFilter#newFilter,Matcher.usePattern#newPattern,MemoryHandler.setPushLevel#newLevel,StringJoiner.add#newElement,Vector.setSize#newSize,AtomicReferenceFieldUpdater#newUpdater,Collections#newSetFromMap,ConcurrentHashMap#newKeySet,Control#newBundle,Executors#newCachedThreadPool,Executors#newFixedThreadPool,Executors#newScheduledThreadPool,Executors#newSingleThreadExecutor,Executors#newSingleThreadScheduledExecutor,Executors#newThread,Executors#newWorkStealingPool,Pack200#newPacker,Pack200#newUnpacker,PreferenceChangeEvent#getNewValue,PropertyPermission#newPermissionCollection,StampedLock#newCondition,StreamSupport#newArray"
next,"BitSet#nextClearBit,BitSet#nextSetBit,Collections#nextElement,Collections#nextIndex,CountedCompleter#nextComplete,JarInputStream#getNextJarEntry,Random#nextBytes,Scanner#hasNextBigDecimal,Scanner#hasNextBigInteger,Scanner#hasNextBoolean,Scanner#hasNextByte,Scanner#hasNextDouble,Scanner#hasNextFloat,Scanner#hasNextInt,Scanner#hasNextLine,Scanner#hasNextLong,Scanner#hasNextShort,Scanner#nextBigDecimal,Scanner#nextBigInteger,Scanner#nextByte,Scanner#nextLine,Scanner#nextShort,ServiceLoader#hasNext,ServiceLoader#next,Spliterators#nextDouble,Spliterators#nextInt,Spliterators#nextLong,SplittableRandom#nextBoolean,StringTokenizer#nextToken,ThreadLocalRandom#nextFloat,ThreadLocalRandom#nextGaussian,ZipInputStream#getNextEntry,ZipOutputStream#putNextEntry"
no,"Control#getNoFallbackControl,NoSuchElementException#NoSuchElementException"
node,"BaseStream.flattenDouble#node,AbstractPreferences#addNodeChangeListener,AbstractPreferences#exportNode,AbstractPreferences#isUserNode,AbstractPreferences#nodeExists,AbstractPreferences#removeNode,AbstractPreferences#removeNodeChangeListener,PreferenceChangeEvent#getNode,Preferences#systemNodeForPackage,Preferences#userNodeForPackage,UUID#node,NodeChangeEvent#NodeChangeEvent,NodeChangeListener#NodeChangeListener"
non,"Objects#nonNull,Objects#requireNonNull"
none,"Builder#noneMatch,EnumSet#noneOf"
normally,"ForkJoinTask#isCompletedNormally"
not,"BitSet#andNot"
notify,"Observable#notifyObservers"
now,"AsynchronousCompletionTask#getNow,Executors#shutdownNow"
nowrap,"Deflater.Deflater#nowrap"
null,"Objects.toString#nullDefault,Objects#isNull,Objects#nonNull,Objects#requireNonNull"
nullable,"Optional#ofNullable"
nulls,"Comparator#nullsFirst,Comparator#nullsLast"
num,"ArrayDeque.ArrayDeque#numElements"
number,"SplittableRandom.doubles#randomNumberBound,SplittableRandom.doubles#randomNumberOrigin,AsynchronousCompletionTask#getNumberOfDependents,CyclicBarrier#getNumberWaiting,LogRecord#getSequenceNumber,LogRecord#setSequenceNumber"
numeric,"Currency#getNumericCode"
obj,"Date.equals#obj,Builder#mapToObj,ObjDoubleConsumer#ObjDoubleConsumer,ObjIntConsumer#ObjIntConsumer,ObjLongConsumer#ObjLongConsumer"
object,"Currency#getObject,PropertyResourceBundle#handleGetObject,ConditionObject#ConditionObject,EventObject#EventObject"
objects,"Objects#Objects"
observable,"Observable#Observable"
observer,"Observable#addObserver,Observable#deleteObserver,Observer#Observer"
observers,"Observable#countObservers,Observable#deleteObservers,Observable#notifyObservers"
observes,"TimeZone#observesDaylightTime"
obtrude,"AsynchronousCompletionTask#obtrudeException,AsynchronousCompletionTask#obtrudeValue"
occurrence,"LinkedBlockingDeque#removeFirstOccurrence,LinkedBlockingDeque#removeLastOccurrence"
of,"Builder.setWeekDefinition#firstDayOfWeek,GregorianCalendar.GregorianCalendar#dayOfMonth,GregorianCalendar.GregorianCalendar#hourOfDay,GregorianCalendar.setWeekDate#dayOfWeek,GregorianCalendar.setWeekDate#weekOfYear,SimpleTimeZone.setEndRule#endDayOfWeek,SimpleTimeZone.setStartRule#startDayOfWeek,Arrays#copyOf,Arrays#copyOfRange,Arrays#indexOf,AsynchronousCompletionTask#anyOf,AsynchronousCompletionTask#getNumberOfDependents,Builder#setFirstDayOfWeek,Builder#setTimeOfDay,CalendarDataProvider#getFirstDayOfWeek,Collections#indexOfSubList,Collections#lastIndexOf,Collections#lastIndexOfSubList,EnumSet#allOf,EnumSet#complementOf,EnumSet#noneOf,EnumSet#of,Formatter#valueOf,Optional#ofNullable,OfDouble#OfDouble,OfInt#OfInt,OfLong#OfLong,OfPrimitive#OfPrimitive"
off,"FileHandler.write#off"
offer,"Collections#offer,LinkedBlockingDeque#offerFirst,LinkedBlockingDeque#offerLast"
offset,"BaseStream.copyInto#destOffset,TimeZone.getAvailableIDs#rawOffset,TimeZone.setRawOffset#offsetMillis,ZipOutputStream.XEntry#offset,Date#getTimezoneOffset,TimeZone#getOffset,TimeZone#getRawOffset,TimeZone#setRawOffset"
old,"Collections.replace#oldValue,Collections.replaceAll#oldVal"
oldest,"DiscardOldestPolicy#DiscardOldestPolicy"
on,"CountedCompleter#onCompletion,CountedCompleter#onExceptionalCompletion,ScheduledThreadPoolExecutor#getRemoveOnCancelPolicy,ScheduledThreadPoolExecutor#setRemoveOnCancelPolicy,StreamSupport#onClose,CopyOnWriteArrayList#CopyOnWriteArrayList,CopyOnWriteArraySet#CopyOnWriteArraySet"
op,"Arrays.parallelPrefix#op,Builder#getOpFlags,Collectors#opEvaluateParallel,Collectors#opWrapSink"
operator,"Arrays.replaceAll#operator,BinaryOperator#BinaryOperator,DoubleBinaryOperator#DoubleBinaryOperator,DoubleUnaryOperator#DoubleUnaryOperator,IntBinaryOperator#IntBinaryOperator,IntUnaryOperator#IntUnaryOperator,LongBinaryOperator#LongBinaryOperator,LongUnaryOperator#LongUnaryOperator,UnaryOperator#UnaryOperator"
optimistic,"StampedLock#tryConvertToOptimisticRead,StampedLock#tryOptimisticRead"
optional,"Optional#Optional,OptionalDouble#OptionalDouble,OptionalInt#OptionalInt,OptionalLong#OptionalLong"
or,"BitSet#or,Collections#getOrDefault,OptionalLong#orElse,OptionalLong#orElseGet,OptionalLong#orElseThrow"
order,"LinkedHashMap.LinkedHashMap#accessOrder,Comparator#naturalOrder,Comparator#reverseOrder"
ordered,"Builder.makeDouble#ordered,Builder#forEachOrdered"
origin,"Spliterators.DoubleArraySpliterator#origin,SplittableRandom.doubles#randomNumberOrigin"
original,"Arrays.copyOfRange#original"
os,"Properties.storeToXML#os"
other,"StringJoiner.merge#other"
out,"StreamHandler.StreamHandler#out,Deflater#getTotalOut,Formatter#out,ThreadPoolExecutor#allowCoreThreadTimeOut,ThreadPoolExecutor#allowsCoreThreadTimeOut"
output,"CheckedOutputStream#CheckedOutputStream,DeflaterOutputStream#DeflaterOutputStream,GZIPOutputStream#GZIPOutputStream,InflaterOutputStream#InflaterOutputStream,JarOutputStream#JarOutputStream,ZipOutputStream#ZipOutputStream"
ownable,"AbstractOwnableSynchronizer#AbstractOwnableSynchronizer"
owns,"AbstractQueuedSynchronizer#owns"
ox,"Level.equals#ox"
pack200,"Pack200#Pack200"
package,"Preferences#systemNodeForPackage,Preferences#userNodeForPackage"
packer,"Pack200#newPacker,Packer#Packer"
padding,"Encoder#withoutPadding"
pairs,"Builder.setFields#fieldValuePairs"
parallel,"StreamSupport.doubleStream#parallel,Arrays#parallelPrefix,Arrays#parallelSetAll,Arrays#parallelSort,Builder#evaluateParallel,Collections#parallelStream,Collectors#opEvaluateParallel,StreamSupport#isParallel,StreamSupport#parallel"
parallelism,"ConcurrentHashMap.reduceEntriesToInt#parallelismThreshold,Executors.newWorkStealingPool#parallelism,ForkJoinWorkerThreadFactory#getCommonPoolParallelism,ForkJoinWorkerThreadFactory#getParallelism"
param1,"Logger.entering#param1"
parameters,"LogRecord.setParameters#parameters,LogRecord#getParameters,LogRecord#setParameters"
params,"FileHandler.log#params"
parent,"Logger.setParent#parent,Logger.setUseParentHandlers#useParentHandlers,AbstractPreferences#parent,Level#getParentLoggerName,Logger#getParent,Logger#getUseParentHandlers,Logger#setParent,Logger#setUseParentHandlers"
park,"LockSupport#park,LockSupport#parkNanos,LockSupport#parkUntil"
parse,"FileHandler#parseLevel,Level#parse"
parties,"CyclicBarrier.CyclicBarrier#parties,CyclicBarrier#getParties,Phaser#getArrivedParties,Phaser#getRegisteredParties,Phaser#getUnarrivedParties"
partitioning,"Collectors#partitioningBy"
path,"AbstractPreferences.nodeExists#path,Preferences.nodeExists#pathName,AbstractPreferences#absolutePath,JarInputStream#jarFileHasClassPathAttribute"
pattern,"FileHandler.FileHandler#pattern,Matcher.usePattern#newPattern,Matcher#usePattern,Pattern#pattern,PatternSyntaxException#getPattern,Pattern#Pattern,PatternSyntaxException#PatternSyntaxException"
pcl,"AbstractPreferences.removePreferenceChangeListener#pcl"
peek,"LinkedBlockingDeque#peekFirst,LinkedBlockingDeque#peekLast,Stack#peek"
pending,"CountedCompleter#addToPendingCount,CountedCompleter#compareAndSetPendingCount,CountedCompleter#decrementPendingCountUnlessZero,CountedCompleter#getPendingCount,CountedCompleter#setPendingCount"
period,"Executors.scheduleAtFixedRate#period"
periodic,"ScheduledThreadPoolExecutor#getContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#isPeriodic,ScheduledThreadPoolExecutor#setContinueExistingPeriodicTasksAfterShutdownPolicy"
permission,"PropertyPermission.implies#permission,PropertyPermission#PropertyPermissionCollection,PropertyPermission#newPermissionCollection,LoggingPermission#LoggingPermission,PropertyPermission#PropertyPermission"
permits,"Semaphore.release#permits,Semaphore#availablePermits,Semaphore#drainPermits"
phase,"Phaser.awaitAdvanceInterruptibly#phase,Phaser#getPhase"
phaser,"Phaser#Phaser"
pid,"PreferenceChangeEvent.resolveEntity#pid"
point,"IllegalFormatCodePointException#getCodePoint,IllegalFormatCodePointException#IllegalFormatCodePointException"
policy,"ScheduledThreadPoolExecutor#getContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#getExecuteExistingDelayedTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#getRemoveOnCancelPolicy,ScheduledThreadPoolExecutor#setContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setExecuteExistingDelayedTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setRemoveOnCancelPolicy,AbortPolicy#AbortPolicy,CallerRunsPolicy#CallerRunsPolicy,DiscardOldestPolicy#DiscardOldestPolicy,DiscardPolicy#DiscardPolicy"
poll,"Collections#poll,Collections#pollFirstEntry,Collections#pollLastEntry,TreeSet#pollFirst,TreeSet#pollLast"
pool,"Executors.newScheduledThreadPool#corePoolSize,ManagedBlocker.newThread#pool,ThreadPoolExecutor.setMaximumPoolSize#maximumPoolSize,Executors#newCachedThreadPool,Executors#newFixedThreadPool,Executors#newScheduledThreadPool,Executors#newWorkStealingPool,ForkJoinTask#inForkJoinPool,ForkJoinWorkerThread#getPool,ForkJoinWorkerThread#getPoolIndex,ForkJoinWorkerThreadFactory#commonPool,ForkJoinWorkerThreadFactory#getCommonPoolParallelism,ThreadPoolExecutor#getCorePoolSize,ThreadPoolExecutor#getLargestPoolSize,ThreadPoolExecutor#getMaximumPoolSize,ThreadPoolExecutor#getPoolSize,ThreadPoolExecutor#setCorePoolSize,ThreadPoolExecutor#setMaximumPoolSize,ForkJoinPool#ForkJoinPool,ScheduledThreadPoolExecutor#ScheduledThreadPoolExecutor,ThreadPoolExecutor#ThreadPoolExecutor"
pop,"Stack#pop"
port,"SocketHandler.SocketHandler#port"
precision,"IllegalFormatPrecisionException#getPrecision,IllegalFormatPrecisionException#IllegalFormatPrecisionException"
predecessors,"AbstractQueuedSynchronizer#hasQueuedPredecessors"
predicate,"Collectors.partitioningBy#predicate,Pattern#asPredicate,BiPredicate#BiPredicate,DoublePredicate#DoublePredicate,IntPredicate#IntPredicate,LongPredicate#LongPredicate,Predicate#Predicate"
preference,"AbstractPreferences#addPreferenceChangeListener,AbstractPreferences#removePreferenceChangeListener,PreferenceChangeEvent#PreferenceChangeEvent,PreferenceChangeListener#PreferenceChangeListener"
preferences,"Preferences#importPreferences,AbstractPreferences#AbstractPreferences,InvalidPreferencesFormatException#InvalidPreferencesFormatException,Preferences#Preferences,PreferencesFactory#PreferencesFactory"
prefix,"StringJoiner.StringJoiner#prefix,Arrays#parallelPrefix"
present,"Collections#computeIfPresent,OptionalLong#ifPresent,OptionalLong#isPresent"
prestart,"ThreadPoolExecutor#prestartAllCoreThreads,ThreadPoolExecutor#prestartCoreThread"
previous,"BitSet#previousClearBit,BitSet#previousSetBit,Collections#hasPrevious,Collections#previous,Collections#previousIndex"
primitive,"StreamSupport#asPrimitiveArray,OfPrimitive#OfPrimitive,PrimitiveIterator#PrimitiveIterator"
print,"Formatter#print"
priority,"LanguageRange.lookupTag#priorityList,PriorityBlockingQueue#PriorityBlockingQueue,PriorityQueue#PriorityQueue"
privileged,"Executors#privilegedCallable,Executors#privilegedCallableUsingCurrentClassLoader,Executors#privilegedThreadFactory"
propagate,"CountedCompleter#propagateCompletion"
properties,"InvalidPropertiesFormatException#InvalidPropertiesFormatException,Properties#Properties"
property,"FileHandler#getProperty,LogManager#addPropertyChangeListener,LogManager#removePropertyChangeListener,Properties#propertyNames,Properties#setProperty,Properties#stringPropertyNames,PropertyPermission#PropertyPermissionCollection,PropertyPermission#PropertyPermission,PropertyResourceBundle#PropertyResourceBundle"
provider,"Currency.getObject#currencyNameProvider,Locale.getObject#localeNameProvider,CalendarDataProvider#CalendarDataProvider,CalendarNameProvider#CalendarNameProvider,CurrencyNameProvider#CurrencyNameProvider,LocaleNameProvider#LocaleNameProvider,LocaleServiceProvider#LocaleServiceProvider,ResourceBundleControlProvider#ResourceBundleControlProvider,TimeZoneNameProvider#TimeZoneNameProvider"
proxy,"EventListenerProxy#EventListenerProxy"
ps,"Formatter.Formatter#ps"
publish,"MemoryHandler#publish"
purge,"ThreadPoolExecutor#purge"
push,"MemoryHandler.MemoryHandler#pushLevel,MemoryHandler#getPushLevel,MemoryHandler#setPushLevel,Stack#push"
put,"AbstractPreferences#putBoolean,AbstractPreferences#putByteArray,AbstractPreferences#putDouble,AbstractPreferences#putFloat,AbstractPreferences#putInt,AbstractPreferences#putLong,Attributes#putValue,Collections#put,Collections#putAll,Collections#putIfAbsent,LinkedBlockingDeque#putFirst,LinkedBlockingDeque#putLast,ZipOutputStream#putNextEntry"
queue,"Collections.checkedQueue#queue,ExecutorCompletionService.ExecutorCompletionService#completionQueue,ThreadPoolExecutor.ThreadPoolExecutor#workQueue,Collections#asLifoQueue,Collections#checkedQueue,ReentrantLock#getWaitQueueLength,Semaphore#getQueueLength,ThreadPoolExecutor#getQueue,AbstractQueue#AbstractQueue,ArrayBlockingQueue#ArrayBlockingQueue,BlockingQueue#BlockingQueue,ConcurrentLinkedQueue#ConcurrentLinkedQueue,DelayQueue#DelayQueue,LinkedBlockingQueue#LinkedBlockingQueue,LinkedTransferQueue#LinkedTransferQueue,PriorityBlockingQueue#PriorityBlockingQueue,PriorityQueue#PriorityQueue,Queue#Queue,SynchronousQueue#SynchronousQueue,TransferQueue#TransferQueue"
queued,"AbstractQueuedSynchronizer#getExclusiveQueuedThreads,AbstractQueuedSynchronizer#getFirstQueuedThread,AbstractQueuedSynchronizer#getQueuedThreads,AbstractQueuedSynchronizer#getSharedQueuedThreads,AbstractQueuedSynchronizer#hasQueuedPredecessors,AbstractQueuedSynchronizer#isQueued,ForkJoinTask#getQueuedTaskCount,ForkJoinTask#getSurplusQueuedTaskCount,ForkJoinWorkerThreadFactory#getQueuedSubmissionCount,ForkJoinWorkerThreadFactory#hasQueuedSubmissions,ReentrantLock#hasQueuedThread,Semaphore#hasQueuedThreads,AbstractQueuedLongSynchronizer#AbstractQueuedLongSynchronizer,AbstractQueuedSynchronizer#AbstractQueuedSynchronizer"
quiesce,"ForkJoinTask#helpQuiesce"
quiescence,"ForkJoinWorkerThreadFactory#awaitQuiescence"
quiescent,"ForkJoinWorkerThreadFactory#isQuiescent"
quietly,"CountedCompleter#quietlyCompleteRoot,ForkJoinTask#quietlyComplete,ForkJoinTask#quietlyInvoke,ForkJoinTask#quietlyJoin"
quote,"Matcher#quoteReplacement,Pattern#quote"
radix,"Scanner.nextBigInteger#radix,Scanner#radix,Scanner#useRadix"
random,"SplittableRandom.doubles#randomNumberBound,SplittableRandom.doubles#randomNumberOrigin,UUID#randomUUID,Random#Random,RandomAccess#RandomAccess,SplittableRandom#SplittableRandom,ThreadLocalRandom#ThreadLocalRandom"
range,"LanguageRange.LanguageRange#range,Arrays#copyOfRange,EnumSet#range,IntStream#rangeClosed,LanguageRange#getRange,LanguageRange#LanguageRange"
ranges,"LanguageRange.parse#ranges"
rate,"Executors#scheduleAtFixedRate"
raw,"CountedCompleter.complete#rawResult,JarInputStream.JarVerifier#rawBytes,TimeZone.getAvailableIDs#rawOffset,AsynchronousCompletionTask#setRawResult,RecursiveTask#getRawResult,TimeZone#getRawOffset,TimeZone#setRawOffset"
read,"Deflater#getBytesRead,DeflaterInputStream#read,LogManager#readConfiguration,Manifest#readLine,StampedLock#asReadLock,StampedLock#asReadWriteLock,StampedLock#getReadLockCount,StampedLock#isReadLocked,StampedLock#readLock,StampedLock#readLockInterruptibly,StampedLock#tryConvertToOptimisticRead,StampedLock#tryConvertToReadLock,StampedLock#tryOptimisticRead,StampedLock#tryReadLock,StampedLock#tryUnlockRead,StampedLock#unlockRead,WriteLock#getReadHoldCount,ReadLock#ReadLock,ReadWriteLock#ReadWriteLock,ReentrantReadWriteLock#ReentrantReadWriteLock"
reader,"PropertyResourceBundle.PropertyResourceBundle#reader,Properties#LineReader"
readlimit,"InflaterInputStream.mark#readlimit"
record,"Filter.isLoggable#record,LogRecord#LogRecord"
recursive,"RecursiveAction#RecursiveAction,RecursiveTask#RecursiveTask"
reduce,"ConcurrentHashMap#reduce,ConcurrentHashMap#reduceEntries,ConcurrentHashMap#reduceEntriesToDouble,ConcurrentHashMap#reduceEntriesToInt,ConcurrentHashMap#reduceEntriesToLong,ConcurrentHashMap#reduceKeys,ConcurrentHashMap#reduceKeysToDouble,ConcurrentHashMap#reduceKeysToInt,ConcurrentHashMap#reduceKeysToLong,ConcurrentHashMap#reduceToDouble,ConcurrentHashMap#reduceToInt,ConcurrentHashMap#reduceToLong,ConcurrentHashMap#reduceValues,ConcurrentHashMap#reduceValuesToDouble,ConcurrentHashMap#reduceValuesToInt,ConcurrentHashMap#reduceValuesToLong"
reducer,"ConcurrentHashMap.reduceEntriesToInt#reducer"
reducing,"Collectors#reducing"
reentrant,"ReentrantLock#ReentrantLock,ReentrantReadWriteLock#ReentrantReadWriteLock"
ref,"AtomicMarkableReference.AtomicMarkableReference#initialRef,Builder#makeRef"
reference,"AtomicMarkableReference.attemptMark#expectedReference,AtomicMarkableReference.set#newReference,AtomicMarkableReference#getReference,Collector#ChainedReference,AtomicMarkableReference#AtomicMarkableReference,AtomicReference#AtomicReference,AtomicReferenceArray#AtomicReferenceArray,AtomicReferenceFieldUpdater#AtomicReferenceFieldUpdater,AtomicStampedReference#AtomicStampedReference"
regex,"PatternSyntaxException.PatternSyntaxException#regex"
region,"Builder.setRegion#region,Builder#setRegion,Matcher#region,Matcher#regionEnd,Matcher#regionStart"
register,"Phaser#bulkRegister,Phaser#register"
registered,"Phaser#getRegisteredParties"
reinitialize,"ForkJoinTask#reinitialize"
rejected,"DiscardOldestPolicy#rejectedExecution,ThreadPoolExecutor#getRejectedExecutionHandler,ThreadPoolExecutor#setRejectedExecutionHandler,RejectedExecutionException#RejectedExecutionException,RejectedExecutionHandler#RejectedExecutionHandler"
releasable,"AsynchronousCompletionTask#isReleasable"
release,"AbstractQueuedSynchronizer#releaseShared,Semaphore#release"
reload,"Control.newBundle#reload,Control#needsReload,ServiceLoader#reload"
remaining,"AbstractDoubleSpliterator#forEachRemaining,Inflater#getRemaining,SynchronousQueue#remainingCapacity"
remapping,"Collections.merge#remappingFunction"
remove,"AbstractPreferences#removeNode,AbstractPreferences#removeNodeChangeListener,AbstractPreferences#removePreferenceChangeListener,Builder#removeUnicodeLocaleAttribute,Collections#removeAll,Collections#removeIf,LinkedBlockingDeque#removeFirst,LinkedBlockingDeque#removeFirstOccurrence,LinkedBlockingDeque#removeLast,LinkedBlockingDeque#removeLastOccurrence,LogManager#removeHandler,LogManager#removePropertyChangeListener,ScheduledThreadPoolExecutor#getRemoveOnCancelPolicy,ScheduledThreadPoolExecutor#setRemoveOnCancelPolicy,ServiceLoader#remove,Vector#removeAllElements,Vector#removeElement,Vector#removeElementAt"
replace,"Arrays#replaceAll,Collections#replace,Matcher#replaceFirst"
replacement,"Matcher.replaceFirst#replacement,Matcher#appendReplacement,Matcher#quoteReplacement"
requested,"Collectors#cancellationRequested"
require,"Matcher#requireEnd,Objects#requireNonNull"
reset,"LogManager#reset,LongAccumulator#getThenReset,LongAdder#sumThenReset"
resolve,"PreferenceChangeEvent#resolveEntity"
resource,"Logger.getAnonymousLogger#resourceBundleName,Control#toResourceName,Level#getResourceBundleName,LogRecord#setResourceBundleName,Logger#getResourceBundle,Logger#setResourceBundle,ResourceBundle#getResource,ResourceBundle#getResourceAsStream,ListResourceBundle#ListResourceBundle,MissingResourceException#MissingResourceException,PropertyResourceBundle#PropertyResourceBundle,ResourceBundle#ResourceBundle,ResourceBundleControlProvider#ResourceBundleControlProvider"
rest,"EnumSet.of#rest"
result,"CountedCompleter.complete#rawResult,Logger.exiting#result,AsynchronousCompletionTask#setRawResult,Collectors#getLocalResult,Matcher#toMatchResult,RecursiveTask#getRawResult,MatchResult#MatchResult"
retain,"Collections#retainAll"
return,"StringTokenizer.StringTokenizer#returnDelims"
reverse,"Collections#reverse,Comparator#reverseOrder"
reversed,"Collections#reversed"
rnd,"Collections.shuffle#rnd"
roll,"GregorianCalendar#roll"
root,"CountedCompleter#getRoot,CountedCompleter#quietlyCompleteRoot,PreferenceChangeEvent#systemRoot,PreferenceChangeEvent#userRoot"
rotate,"Collections#rotate"
rule,"SimpleTimeZone#setEndRule,SimpleTimeZone#setStartRule"
rules,"TimeZone#hasSameRules"
run,"AsynchronousCompletionTask#runAsync,CompletionStage#runAfterBoth,CompletionStage#runAfterBothAsync,CompletionStage#runAfterEither,CompletionStage#runAfterEitherAsync,CompletionStage#thenRun,CompletionStage#thenRunAsync,ServiceLoader#run"
runnable,"FutureTask.FutureTask#runnable,RunnableFuture#RunnableFuture,RunnableScheduledFuture#RunnableScheduledFuture"
running,"FutureTask.cancel#mayInterruptIfRunning,ForkJoinWorkerThreadFactory#getRunningThreadCount"
runs,"CallerRunsPolicy#CallerRunsPolicy"
same,"TimeZone#hasSameRules"
save,"Properties#save"
saved,"SimpleTimeZone.setDSTSavings#millisSavedDuringDST"
savings,"SimpleTimeZone.SimpleTimeZone#dstSavings,SimpleTimeZone#setDSTSavings,TimeZone#getDSTSavings"
sb,"Matcher.appendTail#sb"
scale,"Formatter.BigDecimalLayout#scale,Formatter#scale"
scanner,"Scanner#Scanner"
schedule,"Executors#schedule,Executors#scheduleAtFixedRate,Executors#scheduleWithFixedDelay"
scheduled,"Executors#newScheduledThreadPool,Executors#newSingleThreadScheduledExecutor,Executors#unconfigurableScheduledExecutorService,TimerTask#scheduledExecutionTime,RunnableScheduledFuture#RunnableScheduledFuture,ScheduledExecutorService#ScheduledExecutorService,ScheduledFuture#ScheduledFuture,ScheduledThreadPoolExecutor#ScheduledThreadPoolExecutor"
script,"Builder.setScript#script,LocaleNameProvider.getDisplayScript#scriptCode,Builder#setScript,Locale#getDisplayScript,Locale#getScript"
search,"ConcurrentHashMap.searchEntries#searchFunction,Arrays#binarySearch,ConcurrentHashMap#searchEntries,ConcurrentHashMap#searchKeys,ConcurrentHashMap#searchValues,Stack#search"
sec,"Date.UTC#sec"
second,"Arrays.compare#second"
seconds,"Date.setSeconds#seconds,Date#getSeconds,Date#setSeconds"
seed,"Collector.makeRef#seedFactory,SplittableRandom.SplittableRandom#seed,ThreadLocalRandom#setSeed"
semaphore,"Semaphore#Semaphore"
separator,"Base64.getMimeEncoder#lineSeparator"
seq,"LogRecord.setSequenceNumber#seq"
sequence,"LogRecord#getSequenceNumber,LogRecord#setSequenceNumber,UUID#clockSequence"
sequential,"Builder#evaluateSequential,StreamSupport#sequential,AbstractSequentialList#AbstractSequentialList"
service,"ServiceLoader.loadInstalled#service,Executors#unconfigurableExecutorService,Executors#unconfigurableScheduledExecutorService,AbstractExecutorService#AbstractExecutorService,CompletionService#CompletionService,ExecutorCompletionService#ExecutorCompletionService,ExecutorService#ExecutorService,LocaleServiceProvider#LocaleServiceProvider,ScheduledExecutorService#ScheduledExecutorService,ServiceConfigurationError#ServiceConfigurationError,ServiceLoader#ServiceLoader"
set,"BitSet.andNot#set,Arrays#parallelSetAll,Arrays#set,Arrays#setAll,AsynchronousCompletionTask#setRawResult,AtomicLongArray#getAndSet,AtomicLongArray#lazySet,AtomicMarkableReference#compareAndSet,AtomicMarkableReference#weakCompareAndSet,BitSet#nextSetBit,BitSet#previousSetBit,Builder#isSet,Builder#setCalendarType,Builder#setExtension,Builder#setFields,Builder#setFirstDayOfWeek,Builder#setInstant,Builder#setLanguage,Builder#setLanguageTag,Builder#setLenient,Builder#setLocale,Builder#setMinimalDaysInFirstWeek,Builder#setRegion,Builder#setScript,Builder#setTimeInMillis,Builder#setTimeOfDay,Builder#setUnicodeLocaleKeyword,Builder#setVariant,Builder#setWeekDefinition,Collections#EmptyNavigableSet,Collections#checkedNavigableSet,Collections#checkedSet,Collections#checkedSortedSet,Collections#descendingKeySet,Collections#emptyNavigableSet,Collections#emptySet,Collections#emptySortedSet,Collections#entrySet,Collections#keySet,Collections#navigableKeySet,Collections#newSetFromMap,Collections#setValue,Collections#synchronizedNavigableSet,Collections#synchronizedSet,Collections#synchronizedSortedSet,Collections#unmodifiableNavigableSet,Collections#unmodifiableSet,Collections#unmodifiableSortedSet,Collectors#toSet,ConcurrentHashMap#newKeySet,CountedCompleter#compareAndSetPendingCount,CountedCompleter#setPendingCount,Date#setDate,Date#setHours,Date#setMinutes,Date#setMonth,Date#setSeconds,Date#setTime,Date#setYear,Deflater#setDictionary,Deflater#setInput,Deflater#setStrategy,FileHandler#setLevel,ForkJoinTask#compareAndSetForkJoinTaskTag,ForkJoinTask#setForkJoinTaskTag,ForkJoinWorkerThread#setContextClassLoader,ForkJoinWorkerThread#setUncaughtExceptionHandler,GregorianCalendar#setGregorianChange,GregorianCalendar#setTimeZone,GregorianCalendar#setWeekDate,Handler#setErrorManager,Handler#setFormatter,JarInputStream#setEagerValidation,Level#setLoggerLevel,Locale#setDefault,LogRecord#setLoggerName,LogRecord#setMessage,LogRecord#setMillis,LogRecord#setParameters,LogRecord#setResourceBundleName,LogRecord#setSequenceNumber,LogRecord#setSourceClassName,LogRecord#setSourceMethodName,LogRecord#setThreadID,LogRecord#setThrown,Logger#setFilter,Logger#setParent,Logger#setResourceBundle,Logger#setUseParentHandlers,MemoryHandler#setPushLevel,Properties#setProperty,ScheduledThreadPoolExecutor#setContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setExecuteExistingDelayedTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setRemoveOnCancelPolicy,SimpleTimeZone#setDSTSavings,SimpleTimeZone#setEndRule,SimpleTimeZone#setStartRule,SimpleTimeZone#setStartYear,StreamHandler#setEncoding,StringJoiner#setEmptyValue,ThreadLocalRandom#setSeed,ThreadPoolExecutor#setCorePoolSize,ThreadPoolExecutor#setKeepAliveTime,ThreadPoolExecutor#setMaximumPoolSize,ThreadPoolExecutor#setRejectedExecutionHandler,ThreadPoolExecutor#setThreadFactory,TimeZone#setID,TimeZone#setRawOffset,TreeSet#descendingSet,TreeSet#headSet,TreeSet#subSet,TreeSet#tailSet,Vector#setElementAt,ZipEntry#setComment,ZipEntry#setCompressedSize,ZipEntry#setCrc,ZipEntry#setCreationTime,ZipEntry#setExtra,ZipEntry#setLastAccessTime,ZipEntry#setLastModifiedTime,ZipEntry#setMethod,ZipEntry#setSize,AbstractSet#AbstractSet,BitSet#BitSet,ConcurrentSkipListSet#ConcurrentSkipListSet,CopyOnWriteArraySet#CopyOnWriteArraySet,EnumSet#EnumSet,HashSet#HashSet,KeySetView#KeySetView,LinkedHashSet#LinkedHashSet,NavigableSet#NavigableSet,Set#Set,SortedSet#SortedSet,TreeSet#TreeSet"
severe,"Logger#severe"
shape,"Builder#inputShape"
shared,"AbstractQueuedSynchronizer#acquireShared,AbstractQueuedSynchronizer#acquireSharedInterruptibly,AbstractQueuedSynchronizer#getSharedQueuedThreads,AbstractQueuedSynchronizer#releaseShared,AbstractQueuedSynchronizer#tryAcquireSharedNanos"
short,"Scanner#hasNextShort,Scanner#nextShort"
shuffle,"Collections#shuffle"
shutdown,"Executors#isShutdown,Executors#shutdown,Executors#shutdownNow,ScheduledThreadPoolExecutor#getContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#getExecuteExistingDelayedTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setExecuteExistingDelayedTasksAfterShutdownPolicy"
sid,"PreferenceChangeEvent.resolveEntity#sid"
sig,"UUID.UUID#leastSigBits,UUID.UUID#mostSigBits"
signal,"ConditionObject#signal,ConditionObject#signalAll"
signers,"JarInputStream#getCodeSigners"
significant,"UUID#getLeastSignificantBits,UUID#getMostSignificantBits"
simple,"SimpleEntry#SimpleEntry,SimpleFormatter#SimpleFormatter,SimpleImmutableEntry#SimpleImmutableEntry,SimpleTimeZone#SimpleTimeZone"
single,"Executors#newSingleThreadExecutor,Executors#newSingleThreadScheduledExecutor"
singleton,"Collections#singleton,Collections#singletonList,Collections#singletonMap"
sink,"Collectors.opWrapSink#sink,Collector#makeSink,Collectors#opWrapSink"
size,"AbstractDoubleSpliterator.DoubleIteratorSpliterator#size,Builder.limit#maxSize,Builder.suggestTargetSize#sizeEstimate,Executors.newScheduledThreadPool#corePoolSize,IdentityHashMap.IdentityHashMap#expectedMaxSize,SplittableRandom.doubles#streamSize,ThreadPoolExecutor.setMaximumPoolSize#maximumPoolSize,Vector.setSize#newSize,AbstractDoubleSpliterator#estimateSize,ArrayList#trimToSize,Builder#suggestTargetSize,Collections#getExactSizeIfKnown,Spliterators#spliteratorUnknownSize,ThreadPoolExecutor#getCorePoolSize,ThreadPoolExecutor#getLargestPoolSize,ThreadPoolExecutor#getMaximumPoolSize,ThreadPoolExecutor#getPoolSize,ThreadPoolExecutor#setCorePoolSize,ThreadPoolExecutor#setMaximumPoolSize,TreeSet#size,ZipEntry#getCompressedSize,ZipEntry#getSize,ZipEntry#setCompressedSize,ZipEntry#setSize"
skip,"Builder.makeDouble#skip,DeflaterInputStream#skip,ConcurrentSkipListMap#ConcurrentSkipListMap,ConcurrentSkipListSet#ConcurrentSkipListSet"
socket,"SocketHandler#SocketHandler"
sort,"Arrays#parallelSort,Arrays#sort"
sorted,"Builder#sorted,Collections#checkedSortedMap,Collections#checkedSortedSet,Collections#emptySortedMap,Collections#emptySortedSet,Collections#synchronizedSortedMap,Collections#synchronizedSortedSet,Collections#unmodifiableSortedMap,Collections#unmodifiableSortedSet,SortedMap#SortedMap,SortedSet#SortedSet"
source,"Collections.lastIndexOfSubList#source,LogRecord.setSourceClassName#sourceClassName,LogRecord.setSourceMethodName#sourceMethodName,Logger.throwing#sourceClass,Logger.throwing#sourceMethod,EventObject#getSource,JarInputStream#getCodeSource,LogRecord#getSourceClassName,LogRecord#getSourceMethodName,LogRecord#setSourceClassName,LogRecord#setSourceMethodName"
sources,"JarInputStream#getCodeSources"
specifier,"MissingFormatArgumentException#getFormatSpecifier"
split,"AbstractDoubleSpliterator#trySplit,Pattern#splitAsStream,SplittableRandom#split"
spliterator,"Collectors.ConcatSpliterator#aSpliterator,Collectors.ConcatSpliterator#bSpliterator,Spliterators.iterator#spliterator,AbstractDoubleSpliterator#DoubleIteratorSpliterator,AbstractDoubleSpliterator#IntIteratorSpliterator,AbstractDoubleSpliterator#IteratorSpliterator,AbstractDoubleSpliterator#LongIteratorSpliterator,Collectors#ConcatSpliterator,Spliterators#ArraySpliterator,Spliterators#DoubleArraySpliterator,Spliterators#IntArraySpliterator,Spliterators#LongArraySpliterator,Spliterators#emptyDoubleSpliterator,Spliterators#emptyIntSpliterator,Spliterators#emptyLongSpliterator,Spliterators#emptySpliterator,Spliterators#spliterator,Spliterators#spliteratorUnknownSize,AbstractDoubleSpliterator#AbstractDoubleSpliterator,AbstractIntSpliterator#AbstractIntSpliterator,AbstractLongSpliterator#AbstractLongSpliterator,AbstractSpliterator#AbstractSpliterator,Spliterator#Spliterator"
spliterators,"Spliterators#Spliterators"
splittable,"SplittableRandom#SplittableRandom"
src,"Collections.copy#src"
stack,"EmptyStackException#EmptyStackException,Stack#Stack"
stage,"CompletionStage#CompletionStage"
stamp,"AtomicStampedReference.AtomicStampedReference#initialStamp,AtomicStampedReference.attemptStamp#newStamp,AtomicStampedReference.compareAndSet#expectedStamp,AtomicStampedReference.get#stampHolder,StampedLock.tryConvertToOptimisticRead#stamp,AtomicStampedReference#attemptStamp,AtomicStampedReference#getStamp"
stamped,"AtomicStampedReference#AtomicStampedReference,StampedLock#StampedLock"
start,"Arrays.stream#startInclusive,Matcher.region#start,SimpleTimeZone.SimpleTimeZone#startTimeMode,SimpleTimeZone.setStartRule#startDay,SimpleTimeZone.setStartRule#startDayOfWeek,SimpleTimeZone.setStartRule#startMonth,SimpleTimeZone.setStartRule#startTime,MatchResult#start,Matcher#regionStart,SimpleTimeZone#setStartRule,SimpleTimeZone#setStartYear"
starts,"ZipFile#startsWithLocHeader"
state,"OfPrimitive#getAndClearState"
statistics,"Builder#summaryStatistics,DoubleSummaryStatistics#DoubleSummaryStatistics,IntSummaryStatistics#IntSummaryStatistics,LongSummaryStatistics#LongSummaryStatistics"
steal,"ForkJoinWorkerThreadFactory#getStealCount"
stealing,"Executors#newWorkStealingPool"
store,"Properties#store,Properties#storeToXML,BackingStoreException#BackingStoreException"
str,"StringTokenizer.StringTokenizer#str"
strategy,"Deflater.setStrategy#strategy,Deflater#setStrategy"
stream,"Properties.LineReader#inStream,PropertyResourceBundle.PropertyResourceBundle#stream,SplittableRandom.doubles#streamSize,Arrays#stream,BaseStream#asLongStream,Builder#asDoubleStream,Collections#parallelStream,Pattern#splitAsStream,ResourceBundle#getResourceAsStream,StreamSupport#doubleStream,StreamSupport#intStream,StreamSupport#longStream,ZipFile#getInputStream,BaseStream#BaseStream,CheckedInputStream#CheckedInputStream,CheckedOutputStream#CheckedOutputStream,DeflaterInputStream#DeflaterInputStream,DeflaterOutputStream#DeflaterOutputStream,DoubleStream#DoubleStream,GZIPInputStream#GZIPInputStream,GZIPOutputStream#GZIPOutputStream,InflaterInputStream#InflaterInputStream,InflaterOutputStream#InflaterOutputStream,IntStream#IntStream,JarInputStream#JarInputStream,JarOutputStream#JarOutputStream,LongStream#LongStream,Stream#Stream,StreamHandler#StreamHandler,StreamSupport#StreamSupport,ZipInputStream#ZipInputStream,ZipOutputStream#ZipOutputStream"
string,"Arrays#deepToString,Date#toGMTString,Date#toLocaleString,Encoder#encodeToString,Properties#stringPropertyNames,ResourceBundle#getString,ResourceBundle#getStringArray,StringJoiner#toString,UUID#fromString,StringJoiner#StringJoiner,StringTokenizer#StringTokenizer"
strip,"Locale#stripExtensions"
style,"TimeZoneNameProvider.getGenericDisplayName#style"
sub,"Collections#indexOfSubList,Collections#lastIndexOfSubList,Collections#subList,Collections#subMap,TreeSet#subSet"
submission,"ForkJoinWorkerThreadFactory#getQueuedSubmissionCount"
submissions,"ForkJoinWorkerThreadFactory#hasQueuedSubmissions"
submit,"Executors#submit"
subtree,"AbstractPreferences#exportSubtree"
such,"NoSuchElementException#NoSuchElementException"
suffix,"StringJoiner.StringJoiner#suffix"
suggest,"Builder#suggestTargetSize"
sum,"DoubleSummaryStatistics#getSum,LongAdder#sum,LongAdder#sumThenReset"
summarizing,"Collectors#summarizingDouble,Collectors#summarizingInt,Collectors#summarizingLong"
summary,"Builder#summaryStatistics,DoubleSummaryStatistics#DoubleSummaryStatistics,IntSummaryStatistics#IntSummaryStatistics,LongSummaryStatistics#LongSummaryStatistics"
summing,"Collectors#summingDouble,Collectors#summingInt,Collectors#summingLong"
supplier,"AsynchronousCompletionTask.supplyAsync#supplier,Collectors.toConcurrentMap#mapSupplier,Logger.finest#msgSupplier,Objects.requireNonNull#messageSupplier,OptionalLong.orElseThrow#exceptionSupplier,Collectors#supplier,BooleanSupplier#BooleanSupplier,DoubleSupplier#DoubleSupplier,IntSupplier#IntSupplier,LongSupplier#LongSupplier,Supplier#Supplier"
supply,"AsynchronousCompletionTask#supplyAsync"
support,"LockSupport#LockSupport,StreamSupport#StreamSupport"
supported,"DeflaterInputStream#markSupported,GregorianCalendar#isWeekDateSupported,LocaleServiceProvider#isSupportedLocale"
surplus,"ForkJoinTask#getSurplusQueuedTaskCount"
swap,"Collections#swap"
symbol,"Currency#getSymbol"
sync,"GZIPOutputStream.GZIPOutputStream#syncFlush,AbstractPreferences#sync"
synchronized,"Collections#synchronizedCollection,Collections#synchronizedList,Collections#synchronizedMap,Collections#synchronizedNavigableMap,Collections#synchronizedNavigableSet,Collections#synchronizedSet,Collections#synchronizedSortedMap,Collections#synchronizedSortedSet"
synchronizer,"AbstractOwnableSynchronizer#AbstractOwnableSynchronizer,AbstractQueuedLongSynchronizer#AbstractQueuedLongSynchronizer,AbstractQueuedSynchronizer#AbstractQueuedSynchronizer"
synchronous,"SynchronousQueue#SynchronousQueue"
syntax,"PatternSyntaxException#PatternSyntaxException"
system,"PreferenceChangeEvent#systemRoot,Preferences#systemNodeForPackage"
t1,"Collections.compare#t1"
t2,"Collections.compare#t2"
tag,"Builder.setLanguageTag#languageTag,ForkJoinTask.compareAndSetForkJoinTaskTag#tag,Builder#setLanguageTag,ForkJoinTask#compareAndSetForkJoinTaskTag,ForkJoinTask#getForkJoinTaskTag,ForkJoinTask#setForkJoinTaskTag,LanguageRange#lookupTag,Locale#forLanguageTag,Locale#toLanguageTag"
tags,"LanguageRange.lookupTag#tags,LanguageRange#filterTags"
tail,"Collections#tailMap,Formatter#getTail,Matcher#appendTail,TreeSet#tailSet"
take,"LinkedBlockingDeque#takeFirst,LinkedBlockingDeque#takeLast,SynchronousQueue#take"
target,"MemoryHandler.MemoryHandler#target,ResourceBundle.getBundle#targetLocale,Builder#suggestTargetSize"
task,"Executors.submit#task,ForkJoinTask#compareAndSetForkJoinTaskTag,ForkJoinTask#getForkJoinTaskTag,ForkJoinTask#getQueuedTaskCount,ForkJoinTask#getSurplusQueuedTaskCount,ForkJoinTask#setForkJoinTaskTag,Hashtable#CumulateTask,Hashtable#DoubleCumulateTask,Hashtable#IntCumulateTask,Hashtable#LongCumulateTask,ThreadPoolExecutor#getCompletedTaskCount,ThreadPoolExecutor#getTaskCount,AsynchronousCompletionTask#AsynchronousCompletionTask,ForkJoinTask#ForkJoinTask,FutureTask#FutureTask,RecursiveTask#RecursiveTask,TimerTask#TimerTask"
tasks,"CountedCompleter.helpComplete#maxTasks,Executors.invokeAny#tasks,ScheduledThreadPoolExecutor#getContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#getExecuteExistingDelayedTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setContinueExistingPeriodicTasksAfterShutdownPolicy,ScheduledThreadPoolExecutor#setExecuteExistingDelayedTasksAfterShutdownPolicy"
tclass,"AtomicReferenceFieldUpdater.newUpdater#tclass"
terminated,"Executors#isTerminated"
terminating,"ThreadPoolExecutor#isTerminating"
termination,"Executors#awaitTermination,Phaser#forceTermination"
then,"Collectors#collectingAndThen,CompletionStage#thenAccept,CompletionStage#thenAcceptAsync,CompletionStage#thenAcceptBoth,CompletionStage#thenAcceptBothAsync,CompletionStage#thenApply,CompletionStage#thenApplyAsync,CompletionStage#thenCombine,CompletionStage#thenCombineAsync,CompletionStage#thenCompose,CompletionStage#thenComposeAsync,CompletionStage#thenRun,CompletionStage#thenRunAsync,Hashtable#thenComparing,LongAccumulator#getThenReset,LongAdder#sumThenReset"
thread,"Executors.newScheduledThreadPool#threadFactory,LogRecord.setThreadID#threadID,ReentrantLock.hasQueuedThread#thread,AbstractQueuedSynchronizer#getFirstQueuedThread,Executors#defaultThreadFactory,Executors#newCachedThreadPool,Executors#newFixedThreadPool,Executors#newScheduledThreadPool,Executors#newSingleThreadExecutor,Executors#newSingleThreadScheduledExecutor,Executors#newThread,Executors#privilegedThreadFactory,ForkJoinWorkerThreadFactory#getActiveThreadCount,ForkJoinWorkerThreadFactory#getRunningThreadCount,LogRecord#getThreadID,LogRecord#setThreadID,ReentrantLock#hasQueuedThread,ReentrantLock#isHeldByCurrentThread,ThreadPoolExecutor#allowCoreThreadTimeOut,ThreadPoolExecutor#allowsCoreThreadTimeOut,ThreadPoolExecutor#getThreadFactory,ThreadPoolExecutor#prestartCoreThread,ThreadPoolExecutor#setThreadFactory,WriteLock#isWriteLockedByCurrentThread,ForkJoinWorkerThread#ForkJoinWorkerThread,ForkJoinWorkerThreadFactory#ForkJoinWorkerThreadFactory,ScheduledThreadPoolExecutor#ScheduledThreadPoolExecutor,ThreadFactory#ThreadFactory,ThreadLocalRandom#ThreadLocalRandom,ThreadPoolExecutor#ThreadPoolExecutor"
threads,"Executors.newFixedThreadPool#nThreads,AbstractQueuedSynchronizer#getExclusiveQueuedThreads,AbstractQueuedSynchronizer#getQueuedThreads,AbstractQueuedSynchronizer#getSharedQueuedThreads,AbstractQueuedSynchronizer#getWaitingThreads,Semaphore#hasQueuedThreads,ThreadPoolExecutor#prestartAllCoreThreads"
threshold,"ConcurrentHashMap.reduceEntriesToInt#parallelismThreshold"
throw,"OptionalLong#orElseThrow"
throwing,"Logger#throwing"
thrown,"Logger.throwing#thrown,LogRecord#getThrown,LogRecord#setThrown"
time,"Control.needsReload#loadTime,Date.setTime#time,SimpleTimeZone.SimpleTimeZone#endTimeMode,SimpleTimeZone.SimpleTimeZone#startTimeMode,SimpleTimeZone.setEndRule#endTime,SimpleTimeZone.setStartRule#startTime,ThreadPoolExecutor.ThreadPoolExecutor#keepAliveTime,Timer.scheduleAtFixedRate#firstTime,Builder#getTimeInMillis,Builder#setTimeInMillis,Builder#setTimeOfDay,Control#getTimeToLive,Date#getTime,Date#setTime,DeflaterInputStream#dosToJavaTime,DeflaterInputStream#fileTimeToUnixTime,DeflaterInputStream#fileTimeToUnixTime,DeflaterInputStream#fileTimeToWinTime,DeflaterInputStream#fileTimeToWinTime,DeflaterInputStream#javaToDosTime,DeflaterInputStream#unixTimeToFileTime,DeflaterInputStream#unixTimeToFileTime,DeflaterInputStream#winTimeToFileTime,DeflaterInputStream#winTimeToFileTime,GregorianCalendar#getTimeZone,GregorianCalendar#setTimeZone,GregorianCalendar#toZonedDateTime,ThreadPoolExecutor#allowCoreThreadTimeOut,ThreadPoolExecutor#allowsCoreThreadTimeOut,ThreadPoolExecutor#getKeepAliveTime,ThreadPoolExecutor#setKeepAliveTime,TimeZone#inDaylightTime,TimeZone#observesDaylightTime,TimeZone#useDaylightTime,TimerTask#scheduledExecutionTime,ZipEntry#getCreationTime,ZipEntry#getLastAccessTime,ZipEntry#getLastModifiedTime,ZipEntry#setCreationTime,ZipEntry#setLastAccessTime,ZipEntry#setLastModifiedTime,SimpleTimeZone#SimpleTimeZone,TimeZone#TimeZone,TimeZoneNameProvider#TimeZoneNameProvider"
timeout,"ConditionObject.awaitNanos#nanosTimeout,FutureTask.get#timeout,TimeoutException#TimeoutException"
timer,"Timer#Timer,TimerTask#TimerTask"
timestamp,"UUID#timestamp"
timezone,"Date#getTimezoneOffset"
to,"Arrays.copyOfRange#to,Collections.headMap#toKey,CopyOnWriteArrayList.CopyOnWriteArrayList#toCopyIn,Spliterators.spliterator#toIndex,TreeSet.headSet#toElement,TreeSet.subSet#toInclusive,ArrayList#trimToSize,Arrays#deepToString,Arrays#toArray,BitSet#toByteArray,BitSet#toLongArray,Builder#mapToDouble,Builder#mapToInt,Builder#mapToObj,Collector#flatMapToDouble,Collector#flatMapToInt,Collector#flatMapToLong,Collector#mapToLong,Collectors#toCollection,Collectors#toConcurrentMap,Collectors#toList,Collectors#toMap,Collectors#toSet,CompletionStage#applyToEither,CompletionStage#applyToEitherAsync,CompletionStage#toCompletableFuture,ConcurrentHashMap#reduceEntriesToDouble,ConcurrentHashMap#reduceEntriesToInt,ConcurrentHashMap#reduceEntriesToLong,ConcurrentHashMap#reduceKeysToDouble,ConcurrentHashMap#reduceKeysToInt,ConcurrentHashMap#reduceKeysToLong,ConcurrentHashMap#reduceToDouble,ConcurrentHashMap#reduceToInt,ConcurrentHashMap#reduceToLong,ConcurrentHashMap#reduceValuesToDouble,ConcurrentHashMap#reduceValuesToInt,ConcurrentHashMap#reduceValuesToLong,Control#getTimeToLive,Control#toBundleName,Control#toResourceName,CountedCompleter#addToPendingCount,Date#compareTo,Date#toGMTString,Date#toInstant,Date#toLocaleString,DeflaterInputStream#dosToJavaTime,DeflaterInputStream#fileTimeToUnixTime,DeflaterInputStream#fileTimeToWinTime,DeflaterInputStream#javaToDosTime,DeflaterInputStream#unixTimeToFileTime,DeflaterInputStream#winTimeToFileTime,Encoder#encodeToString,GregorianCalendar#toZonedDateTime,Locale#toLanguageTag,Matcher#toMatchResult,Properties#storeToXML,StampedLock#tryConvertToOptimisticRead,StampedLock#tryConvertToReadLock,StampedLock#tryConvertToWriteLock,StringJoiner#toString,SynchronousQueue#drainTo,TimeZone#toZoneId,DoubleToIntFunction#DoubleToIntFunction,DoubleToLongFunction#DoubleToLongFunction,IntToDoubleFunction#IntToDoubleFunction,IntToLongFunction#IntToLongFunction,LongToDoubleFunction#LongToDoubleFunction,LongToIntFunction#LongToIntFunction,ToDoubleBiFunction#ToDoubleBiFunction,ToDoubleFunction#ToDoubleFunction,ToIntBiFunction#ToIntBiFunction,ToIntFunction#ToIntFunction,ToLongBiFunction#ToLongBiFunction,ToLongFunction#ToLongFunction"
token,"StringTokenizer#nextToken"
tokenizer,"StringTokenizer#StringTokenizer"
tokens,"StringTokenizer#countTokens,StringTokenizer#hasMoreTokens"
too,"TooManyListenersException#TooManyListenersException"
total,"Deflater#getTotalIn,Deflater#getTotalOut"
transfer,"LinkedTransferQueue#transfer,LinkedTransferQueue#tryTransfer,LinkedTransferQueue#LinkedTransferQueue,TransferQueue#TransferQueue"
transformer,"ConcurrentHashMap.reduceEntriesToInt#transformer"
transparent,"Matcher#hasTransparentBounds,Matcher#useTransparentBounds"
tree,"BaseStream.collectDouble#flattenTree,TreeMap#TreeMap,TreeSet#TreeSet"
trim,"ArrayList#trimToSize"
truncate,"BaseStream#truncate"
try,"AbstractDoubleSpliterator#tryAdvance,AbstractDoubleSpliterator#trySplit,AbstractQueuedSynchronizer#tryAcquireNanos,AbstractQueuedSynchronizer#tryAcquireSharedNanos,CountedCompleter#tryComplete,ForkJoinTask#tryUnfork,LinkedTransferQueue#tryTransfer,Semaphore#tryAcquire,StampedLock#tryConvertToOptimisticRead,StampedLock#tryConvertToReadLock,StampedLock#tryConvertToWriteLock,StampedLock#tryOptimisticRead,StampedLock#tryReadLock,StampedLock#tryUnlockRead,StampedLock#tryUnlockWrite,StampedLock#tryWriteLock,ThreadPoolExecutor#tryLock"
type,"Arrays.copyOfRange#newType,CalendarNameProvider.getDisplayNames#calendarType,Collections.checkedList#type,Collections.checkedNavigableMap#keyType,Collections.checkedNavigableMap#valueType,EnumSet.allOf#elementType,Builder#setCalendarType,GregorianCalendar#getCalendarType,Locale#getUnicodeLocaleType"
types,"Builder#getAvailableCalendarTypes"
unarrived,"Phaser#getUnarrivedParties"
unary,"DoubleUnaryOperator#DoubleUnaryOperator,IntUnaryOperator#IntUnaryOperator,LongUnaryOperator#LongUnaryOperator,UnaryOperator#UnaryOperator"
uncaught,"ForkJoinWorkerThread#setUncaughtExceptionHandler,ForkJoinWorkerThreadFactory#getUncaughtExceptionHandler"
unconfigurable,"Executors#unconfigurableExecutorService,Executors#unconfigurableScheduledExecutorService"
unfork,"ForkJoinTask#tryUnfork"
unicode,"Builder#addUnicodeLocaleAttribute,Builder#removeUnicodeLocaleAttribute,Builder#setUnicodeLocaleKeyword,Locale#getUnicodeLocaleAttributes,Locale#getUnicodeLocaleKeys,Locale#getUnicodeLocaleType"
uninterruptibly,"ConditionObject#awaitUninterruptibly,Semaphore#acquireUninterruptibly"
unit,"FutureTask.get#unit"
unix,"DeflaterInputStream#fileTimeToUnixTime,DeflaterInputStream#unixTimeToFileTime"
unknown,"Spliterators#spliteratorUnknownSize,UnknownFormatConversionException#UnknownFormatConversionException,UnknownFormatFlagsException#UnknownFormatFlagsException"
unless,"CountedCompleter#decrementPendingCountUnlessZero"
unlock,"StampedLock#tryUnlockRead,StampedLock#tryUnlockWrite,StampedLock#unlockRead,StampedLock#unlockWrite,ThreadPoolExecutor#unlock"
unmodifiable,"Collections#unmodifiableCollection,Collections#unmodifiableList,Collections#unmodifiableMap,Collections#unmodifiableNavigableMap,Collections#unmodifiableNavigableSet,Collections#unmodifiableSet,Collections#unmodifiableSortedMap,Collections#unmodifiableSortedSet"
unordered,"Builder#unordered"
unpacker,"Pack200#newUnpacker,Unpacker#Unpacker"
unpark,"LockSupport#unpark"
until,"ConditionObject#awaitUntil,LockSupport#parkUntil"
up,"GregorianCalendar.roll#up"
update,"AtomicLongArray.updateAndGet#updateFunction,AtomicLongArray.weakCompareAndSet#update,AtomicLongArray#getAndUpdate,AtomicLongArray#updateAndGet,CRC32#update"
updater,"AtomicReferenceFieldUpdater#newUpdater,AtomicIntegerFieldUpdater#AtomicIntegerFieldUpdater,AtomicLongFieldUpdater#AtomicLongFieldUpdater,AtomicReferenceFieldUpdater#AtomicReferenceFieldUpdater"
upstream,"Builder.makeDouble#upstream"
url,"JarInputStream.getCodeSource#url,Base64#getUrlDecoder,Base64#getUrlEncoder"
use,"Logger.setUseParentHandlers#useParentHandlers,Logger#getUseParentHandlers,Logger#setUseParentHandlers,Matcher#useAnchoringBounds,Matcher#usePattern,Matcher#useTransparentBounds,Scanner#useDelimiter,Scanner#useLocale,Scanner#useRadix,TimeZone#useDaylightTime"
user,"AbstractPreferences#isUserNode,PreferenceChangeEvent#userRoot,Preferences#userNodeForPackage"
using,"Executors#privilegedCallableUsingCurrentClassLoader"
utc,"Date#UTC"
utime,"DeflaterInputStream.unixTimeToFileTime#utime"
uuid,"UUID#nameUUIDFromBytes,UUID#randomUUID,UUID#UUID"
val,"Arrays.fill#val,Collections.replaceAll#newVal,Collections.replaceAll#oldVal,Formatter.BigDecimalLayout#intVal"
validate,"StampedLock#validate"
validation,"JarInputStream#setEagerValidation"
value,"AbstractDoubleSpliterator.accept#value,AsynchronousCompletionTask.getNow#valueIfAbsent,AtomicReference.AtomicReference#initialValue,Builder.setFields#fieldValuePairs,Collections.checkedNavigableMap#valueType,Collections.getOrDefault#defaultValue,Collections.replace#newValue,Collections.replace#oldValue,Collectors.toConcurrentMap#valueMapper,ConcurrentHashMap.keySet#mappedValue,StringJoiner.setEmptyValue#emptyValue,AsynchronousCompletionTask#obtrudeValue,AtomicInteger#doubleValue,AtomicInteger#floatValue,AtomicInteger#longValue,Attributes#putValue,Collections#containsValue,Collections#getValue,Collections#setValue,ConcurrentHashMap#forEachValue,Exchanger#initialValue,FileHandler#getLevelValue,Formatter#valueOf,KeySetView#getMappedValue,Level#intValue,Map#comparingByValue,PreferenceChangeEvent#getNewValue,StringJoiner#setEmptyValue"
values,"DoubleStream.of#values,Collections#values,ConcurrentHashMap#reduceValues,ConcurrentHashMap#reduceValuesToDouble,ConcurrentHashMap#reduceValuesToInt,ConcurrentHashMap#reduceValuesToLong,ConcurrentHashMap#searchValues"
variant,"Builder.setVariant#variant,Builder#setVariant,Locale#getDisplayVariant,Locale#getVariant,UUID#variant"
vclass,"AtomicReferenceFieldUpdater.newUpdater#vclass"
vector,"Vector#Vector"
verifier,"JarInputStream#JarVerifier"
verify,"JarInputStream.JarInputStream#verify"
version,"UUID#version"
view,"KeySetView#KeySetView"
wait,"ReentrantLock#getWaitQueueLength"
waiters,"ReentrantLock#hasWaiters"
waiting,"AbstractQueuedSynchronizer#getWaitingThreads,CyclicBarrier#getNumberWaiting,LinkedTransferQueue#getWaitingConsumerCount,LinkedTransferQueue#hasWaitingConsumer"
warning,"Logger#warning"
weak,"AtomicMarkableReference#weakCompareAndSet,WeakHashMap#WeakHashMap"
week,"Builder.setWeekDefinition#firstDayOfWeek,Builder.setWeekDefinition#minimalDaysInFirstWeek,GregorianCalendar.setWeekDate#dayOfWeek,GregorianCalendar.setWeekDate#weekOfYear,GregorianCalendar.setWeekDate#weekYear,SimpleTimeZone.setEndRule#endDayOfWeek,SimpleTimeZone.setStartRule#startDayOfWeek,Builder#setFirstDayOfWeek,Builder#setMinimalDaysInFirstWeek,Builder#setWeekDefinition,CalendarDataProvider#getFirstDayOfWeek,CalendarDataProvider#getMinimalDaysInFirstWeek,GregorianCalendar#getWeekYear,GregorianCalendar#getWeeksInWeekYear,GregorianCalendar#isWeekDateSupported,GregorianCalendar#setWeekDate"
weeks,"GregorianCalendar#getWeeksInWeekYear"
weight,"LanguageRange.LanguageRange#weight,LanguageRange#getWeight"
when,"Date.after#when,CompletionStage#whenComplete,CompletionStage#whenCompleteAsync"
width,"IllegalFormatWidthException#getWidth,IllegalFormatWidthException#IllegalFormatWidthException,MissingFormatWidthException#MissingFormatWidthException"
win,"DeflaterInputStream#fileTimeToWinTime,DeflaterInputStream#winTimeToFileTime"
with,"Executors#scheduleWithFixedDelay,ZipFile#startsWithLocHeader"
within,"Scanner#findWithinHorizon"
without,"Encoder#withoutPadding"
work,"ThreadPoolExecutor.ThreadPoolExecutor#workQueue,Executors#newWorkStealingPool"
worker,"ForkJoinWorkerThread#ForkJoinWorkerThread,ForkJoinWorkerThreadFactory#ForkJoinWorkerThreadFactory"
wrap,"Collectors#opWrapSink,Decoder#wrap"
write,"FileHandler#write,StampedLock#asReadWriteLock,StampedLock#asWriteLock,StampedLock#isWriteLocked,StampedLock#tryConvertToWriteLock,StampedLock#tryUnlockWrite,StampedLock#tryWriteLock,StampedLock#unlockWrite,StampedLock#writeLock,StampedLock#writeLockInterruptibly,WriteLock#getWriteHoldCount,WriteLock#isWriteLockedByCurrentThread,CopyOnWriteArrayList#CopyOnWriteArrayList,CopyOnWriteArraySet#CopyOnWriteArraySet,ReadWriteLock#ReadWriteLock,ReentrantReadWriteLock#ReentrantReadWriteLock,WriteLock#WriteLock"
writer,"Properties.store#writer"
written,"Deflater#getBytesWritten"
wtime,"DeflaterInputStream.winTimeToFileTime#wtime"
x,"ZipOutputStream#XEntry"
xml,"Properties#loadFromXML,Properties#storeToXML,XMLFormatter#XMLFormatter"
xor,"BitSet#xor"
year,"Date.setYear#year,GregorianCalendar.setWeekDate#weekOfYear,GregorianCalendar.setWeekDate#weekYear,Date#getYear,Date#setYear,GregorianCalendar#getWeekYear,GregorianCalendar#getWeeksInWeekYear,GregorianCalendar#isLeapYear,SimpleTimeZone#setStartYear"
zdt,"GregorianCalendar.from#zdt"
ze,"JarEntry.JarEntry#ze"
zero,"CountedCompleter#decrementPendingCountUnlessZero"
zip,"ZipFile.startsWithLocHeader#zip,ZipFile#ZipEntryIterator,ZipEntry#ZipEntry,ZipError#ZipError,ZipException#ZipException,ZipFile#ZipFile,ZipInputStream#ZipInputStream,ZipOutputStream#ZipOutputStream"
zone,"GregorianCalendar.setTimeZone#zone,TimeZone.getTimeZone#zoneId,GregorianCalendar#getTimeZone,GregorianCalendar#setTimeZone,TimeZone#toZoneId,SimpleTimeZone#SimpleTimeZone,TimeZone#TimeZone,TimeZoneNameProvider#TimeZoneNameProvider"
zoned,"GregorianCalendar#toZonedDateTime"
